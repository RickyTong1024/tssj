// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: equip.eproto

#include "equip.eproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace dhc {
class equip_tDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<equip_t>
      _instance;
} _equip_t_default_instance_;
}  // namespace dhc
namespace protobuf_equip_2eeproto {
static void InitDefaultsequip_t() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dhc::_equip_t_default_instance_;
    new (ptr) ::dhc::equip_t();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dhc::equip_t::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_equip_t =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsequip_t}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_equip_t.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dhc::equip_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dhc::equip_t, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dhc::equip_t, player_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dhc::equip_t, template_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dhc::equip_t, role_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dhc::equip_t, enhance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dhc::equip_t, locked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dhc::equip_t, rand_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dhc::equip_t, rand_values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dhc::equip_t, stone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dhc::equip_t, jilian_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dhc::equip_t, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dhc::equip_t, gaizao_counts_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dhc::equip_t)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::dhc::_equip_t_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "equip.eproto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014equip.eproto\022\003dhc\"\340\001\n\007equip_t\022\014\n\004guid\030"
      "\001 \001(\004\022\023\n\013player_guid\030\002 \001(\004\022\023\n\013template_i"
      "d\030\003 \001(\005\022\021\n\trole_guid\030\004 \001(\004\022\017\n\007enhance\030\005 "
      "\001(\005\022\016\n\006locked\030\006 \001(\005\022\020\n\010rand_ids\030\007 \003(\005\022\023\n"
      "\013rand_values\030\010 \003(\005\022\r\n\005stone\030\t \003(\005\022\016\n\006jil"
      "ian\030\n \001(\005\022\014\n\004star\030\013 \001(\005\022\025\n\rgaizao_counts"
      "\030\014 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 254);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "equip.eproto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_equip_2eeproto
namespace dhc {

// ===================================================================

void equip_t::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int equip_t::kGuidFieldNumber;
const int equip_t::kPlayerGuidFieldNumber;
const int equip_t::kTemplateIdFieldNumber;
const int equip_t::kRoleGuidFieldNumber;
const int equip_t::kEnhanceFieldNumber;
const int equip_t::kLockedFieldNumber;
const int equip_t::kRandIdsFieldNumber;
const int equip_t::kRandValuesFieldNumber;
const int equip_t::kStoneFieldNumber;
const int equip_t::kJilianFieldNumber;
const int equip_t::kStarFieldNumber;
const int equip_t::kGaizaoCountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

equip_t::equip_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_equip_2eeproto::scc_info_equip_t.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dhc.equip_t)
}
equip_t::equip_t(const equip_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rand_ids_(from.rand_ids_),
      rand_values_(from.rand_values_),
      stone_(from.stone_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gaizao_counts_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(gaizao_counts_));
  // @@protoc_insertion_point(copy_constructor:dhc.equip_t)
}

void equip_t::SharedCtor() {
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gaizao_counts_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(gaizao_counts_));
}

equip_t::~equip_t() {
  // @@protoc_insertion_point(destructor:dhc.equip_t)
  SharedDtor();
}

void equip_t::SharedDtor() {
}

void equip_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* equip_t::descriptor() {
  ::protobuf_equip_2eeproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_equip_2eeproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const equip_t& equip_t::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_equip_2eeproto::scc_info_equip_t.base);
  return *internal_default_instance();
}


void equip_t::Clear() {
// @@protoc_insertion_point(message_clear_start:dhc.equip_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  rand_ids_.Clear();
  set_changed();
  rand_values_.Clear();
  set_changed();
  stone_.Clear();
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gaizao_counts_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(gaizao_counts_));
  _internal_metadata_.Clear();
}

bool equip_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dhc.equip_t)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 template_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 role_guid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 enhance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 locked = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 rand_ids = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rand_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_rand_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 rand_values = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rand_values())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66u, input, this->mutable_rand_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stone = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stone())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74u, input, this->mutable_stone())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 jilian = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jilian_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 star = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gaizao_counts = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gaizao_counts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dhc.equip_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dhc.equip_t)
  return false;
#undef DO_
}

void equip_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dhc.equip_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // uint64 player_guid = 2;
  if (this->player_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_guid(), output);
  }

  // int32 template_id = 3;
  if (this->template_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->template_id(), output);
  }

  // uint64 role_guid = 4;
  if (this->role_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->role_guid(), output);
  }

  // int32 enhance = 5;
  if (this->enhance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->enhance(), output);
  }

  // int32 locked = 6;
  if (this->locked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->locked(), output);
  }

  // repeated int32 rand_ids = 7;
  if (this->rand_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _rand_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->rand_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->rand_ids(i), output);
  }

  // repeated int32 rand_values = 8;
  if (this->rand_values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _rand_values_cached_byte_size_));
  }
  for (int i = 0, n = this->rand_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->rand_values(i), output);
  }

  // repeated int32 stone = 9;
  if (this->stone_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _stone_cached_byte_size_));
  }
  for (int i = 0, n = this->stone_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stone(i), output);
  }

  // int32 jilian = 10;
  if (this->jilian() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->jilian(), output);
  }

  // int32 star = 11;
  if (this->star() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->star(), output);
  }

  // int32 gaizao_counts = 12;
  if (this->gaizao_counts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gaizao_counts(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dhc.equip_t)
}

::google::protobuf::uint8* equip_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dhc.equip_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // uint64 player_guid = 2;
  if (this->player_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_guid(), target);
  }

  // int32 template_id = 3;
  if (this->template_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->template_id(), target);
  }

  // uint64 role_guid = 4;
  if (this->role_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->role_guid(), target);
  }

  // int32 enhance = 5;
  if (this->enhance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->enhance(), target);
  }

  // int32 locked = 6;
  if (this->locked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->locked(), target);
  }

  // repeated int32 rand_ids = 7;
  if (this->rand_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _rand_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->rand_ids_, target);
  }

  // repeated int32 rand_values = 8;
  if (this->rand_values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _rand_values_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->rand_values_, target);
  }

  // repeated int32 stone = 9;
  if (this->stone_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _stone_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stone_, target);
  }

  // int32 jilian = 10;
  if (this->jilian() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->jilian(), target);
  }

  // int32 star = 11;
  if (this->star() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->star(), target);
  }

  // int32 gaizao_counts = 12;
  if (this->gaizao_counts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gaizao_counts(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dhc.equip_t)
  return target;
}

size_t equip_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dhc.equip_t)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 rand_ids = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->rand_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rand_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 rand_values = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->rand_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rand_values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 stone = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stone_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stone_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // uint64 player_guid = 2;
  if (this->player_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  // uint64 role_guid = 4;
  if (this->role_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->role_guid());
  }

  // int32 template_id = 3;
  if (this->template_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->template_id());
  }

  // int32 enhance = 5;
  if (this->enhance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->enhance());
  }

  // int32 locked = 6;
  if (this->locked() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->locked());
  }

  // int32 jilian = 10;
  if (this->jilian() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->jilian());
  }

  // int32 star = 11;
  if (this->star() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());
  }

  // int32 gaizao_counts = 12;
  if (this->gaizao_counts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gaizao_counts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void equip_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dhc.equip_t)
  GOOGLE_DCHECK_NE(&from, this);
  const equip_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const equip_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dhc.equip_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dhc.equip_t)
    MergeFrom(*source);
  }
}

void equip_t::MergeFrom(const equip_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dhc.equip_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rand_ids_.MergeFrom(from.rand_ids_);
  rand_values_.MergeFrom(from.rand_values_);
  stone_.MergeFrom(from.stone_);
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.player_guid() != 0) {
    set_player_guid(from.player_guid());
  }
  if (from.role_guid() != 0) {
    set_role_guid(from.role_guid());
  }
  if (from.template_id() != 0) {
    set_template_id(from.template_id());
  }
  if (from.enhance() != 0) {
    set_enhance(from.enhance());
  }
  if (from.locked() != 0) {
    set_locked(from.locked());
  }
  if (from.jilian() != 0) {
    set_jilian(from.jilian());
  }
  if (from.star() != 0) {
    set_star(from.star());
  }
  if (from.gaizao_counts() != 0) {
    set_gaizao_counts(from.gaizao_counts());
  }
}

void equip_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dhc.equip_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_t::CopyFrom(const equip_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dhc.equip_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_t::IsInitialized() const {
  return true;
}

void equip_t::Swap(equip_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void equip_t::InternalSwap(equip_t* other) {
  using std::swap;
  rand_ids_.InternalSwap(&other->rand_ids_);
  rand_values_.InternalSwap(&other->rand_values_);
  stone_.InternalSwap(&other->stone_);
  swap(guid_, other->guid_);
  swap(player_guid_, other->player_guid_);
  swap(role_guid_, other->role_guid_);
  swap(template_id_, other->template_id_);
  swap(enhance_, other->enhance_);
  swap(locked_, other->locked_);
  swap(jilian_, other->jilian_);
  swap(star_, other->star_);
  swap(gaizao_counts_, other->gaizao_counts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata equip_t::GetMetadata() const {
  protobuf_equip_2eeproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_equip_2eeproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dhc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dhc::equip_t* Arena::CreateMaybeMessage< ::dhc::equip_t >(Arena* arena) {
  return Arena::CreateInternal< ::dhc::equip_t >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
