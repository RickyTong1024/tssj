// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lottery_list.eproto

#ifndef PROTOBUF_INCLUDED_lottery_5flist_2eeproto
#define PROTOBUF_INCLUDED_lottery_5flist_2eeproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_lottery_5flist_2eeproto 

namespace protobuf_lottery_5flist_2eeproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_lottery_5flist_2eeproto
namespace dhc {
class pvp_list_t;
class pvp_list_tDefaultTypeInternal;
extern pvp_list_tDefaultTypeInternal _pvp_list_t_default_instance_;
}  // namespace dhc
namespace google {
namespace protobuf {
template<> ::dhc::pvp_list_t* Arena::CreateMaybeMessage<::dhc::pvp_list_t>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dhc {

// ===================================================================

class pvp_list_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dhc.pvp_list_t) */ {
 public:
  pvp_list_t();
  virtual ~pvp_list_t();

  pvp_list_t(const pvp_list_t& from);

  inline pvp_list_t& operator=(const pvp_list_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pvp_list_t(pvp_list_t&& from) noexcept
    : pvp_list_t() {
    *this = ::std::move(from);
  }

  inline pvp_list_t& operator=(pvp_list_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const pvp_list_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pvp_list_t* internal_default_instance() {
    return reinterpret_cast<const pvp_list_t*>(
               &_pvp_list_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(pvp_list_t* other);
  friend void swap(pvp_list_t& a, pvp_list_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pvp_list_t* New() const final {
    return CreateMaybeMessage<pvp_list_t>(NULL);
  }

  pvp_list_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pvp_list_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pvp_list_t& from);
  void MergeFrom(const pvp_list_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pvp_list_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 player_guids = 2;
  int player_guids_size() const;
  void clear_player_guids();
  static const int kPlayerGuidsFieldNumber = 2;
  ::google::protobuf::uint64 player_guids(int index) const;
  void set_player_guids(int index, ::google::protobuf::uint64 value);
  void add_player_guids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      player_guids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_player_guids();

  // repeated uint64 player_targets = 3;
  int player_targets_size() const;
  void clear_player_targets();
  static const int kPlayerTargetsFieldNumber = 3;
  ::google::protobuf::uint64 player_targets(int index) const;
  void set_player_targets(int index, ::google::protobuf::uint64 value);
  void add_player_targets(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      player_targets() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_player_targets();

  // repeated string player_names = 4;
  int player_names_size() const;
  void clear_player_names();
  static const int kPlayerNamesFieldNumber = 4;
  const ::std::string& player_names(int index) const;
  ::std::string* mutable_player_names(int index);
  void set_player_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_player_names(int index, ::std::string&& value);
  #endif
  void set_player_names(int index, const char* value);
  void set_player_names(int index, const char* value, size_t size);
  ::std::string* add_player_names();
  void add_player_names(const ::std::string& value);
  #if LANG_CXX11
  void add_player_names(::std::string&& value);
  #endif
  void add_player_names(const char* value);
  void add_player_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& player_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_player_names();

  // repeated int32 player_templates = 5;
  int player_templates_size() const;
  void clear_player_templates();
  static const int kPlayerTemplatesFieldNumber = 5;
  ::google::protobuf::int32 player_templates(int index) const;
  void set_player_templates(int index, ::google::protobuf::int32 value);
  void add_player_templates(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      player_templates() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_player_templates();

  // repeated int32 player_servers = 6;
  int player_servers_size() const;
  void clear_player_servers();
  static const int kPlayerServersFieldNumber = 6;
  ::google::protobuf::int32 player_servers(int index) const;
  void set_player_servers(int index, ::google::protobuf::int32 value);
  void add_player_servers(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      player_servers() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_player_servers();

  // repeated int32 player_bfs = 7;
  int player_bfs_size() const;
  void clear_player_bfs();
  static const int kPlayerBfsFieldNumber = 7;
  ::google::protobuf::int32 player_bfs(int index) const;
  void set_player_bfs(int index, ::google::protobuf::int32 value);
  void add_player_bfs(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      player_bfs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_player_bfs();

  // repeated int32 player_pvps = 8;
  int player_pvps_size() const;
  void clear_player_pvps();
  static const int kPlayerPvpsFieldNumber = 8;
  ::google::protobuf::int32 player_pvps(int index) const;
  void set_player_pvps(int index, ::google::protobuf::int32 value);
  void add_player_pvps(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      player_pvps() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_player_pvps();

  // repeated int32 player_wins = 9;
  int player_wins_size() const;
  void clear_player_wins();
  static const int kPlayerWinsFieldNumber = 9;
  ::google::protobuf::int32 player_wins(int index) const;
  void set_player_wins(int index, ::google::protobuf::int32 value);
  void add_player_wins(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      player_wins() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_player_wins();

  // repeated int32 player_vips = 10;
  int player_vips_size() const;
  void clear_player_vips();
  static const int kPlayerVipsFieldNumber = 10;
  ::google::protobuf::int32 player_vips(int index) const;
  void set_player_vips(int index, ::google::protobuf::int32 value);
  void add_player_vips(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      player_vips() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_player_vips();

  // repeated int32 player_achieves = 11;
  int player_achieves_size() const;
  void clear_player_achieves();
  static const int kPlayerAchievesFieldNumber = 11;
  ::google::protobuf::int32 player_achieves(int index) const;
  void set_player_achieves(int index, ::google::protobuf::int32 value);
  void add_player_achieves(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      player_achieves() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_player_achieves();

  // repeated int32 player_guanghuans = 12;
  int player_guanghuans_size() const;
  void clear_player_guanghuans();
  static const int kPlayerGuanghuansFieldNumber = 12;
  ::google::protobuf::int32 player_guanghuans(int index) const;
  void set_player_guanghuans(int index, ::google::protobuf::int32 value);
  void add_player_guanghuans(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      player_guanghuans() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_player_guanghuans();

  // repeated int32 player_dress = 13;
  int player_dress_size() const;
  void clear_player_dress();
  static const int kPlayerDressFieldNumber = 13;
  ::google::protobuf::int32 player_dress(int index) const;
  void set_player_dress(int index, ::google::protobuf::int32 value);
  void add_player_dress(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      player_dress() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_player_dress();

  // repeated int32 player_chenghaos = 14;
  int player_chenghaos_size() const;
  void clear_player_chenghaos();
  static const int kPlayerChenghaosFieldNumber = 14;
  ::google::protobuf::int32 player_chenghaos(int index) const;
  void set_player_chenghaos(int index, ::google::protobuf::int32 value);
  void add_player_chenghaos(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      player_chenghaos() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_player_chenghaos();

  // repeated int32 player_nalflags = 15;
  int player_nalflags_size() const;
  void clear_player_nalflags();
  static const int kPlayerNalflagsFieldNumber = 15;
  ::google::protobuf::int32 player_nalflags(int index) const;
  void set_player_nalflags(int index, ::google::protobuf::int32 value);
  void add_player_nalflags(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      player_nalflags() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_player_nalflags();

  // uint64 guid = 1;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // uint64 refresh_time = 16;
  void clear_refresh_time();
  static const int kRefreshTimeFieldNumber = 16;
  ::google::protobuf::uint64 refresh_time() const;
  void set_refresh_time(::google::protobuf::uint64 value);

  // int32 sync_flag = 17;
  void clear_sync_flag();
  static const int kSyncFlagFieldNumber = 17;
  ::google::protobuf::int32 sync_flag() const;
  void set_sync_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dhc.pvp_list_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > player_guids_;
  mutable int _player_guids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > player_targets_;
  mutable int _player_targets_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> player_names_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > player_templates_;
  mutable int _player_templates_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > player_servers_;
  mutable int _player_servers_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > player_bfs_;
  mutable int _player_bfs_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > player_pvps_;
  mutable int _player_pvps_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > player_wins_;
  mutable int _player_wins_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > player_vips_;
  mutable int _player_vips_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > player_achieves_;
  mutable int _player_achieves_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > player_guanghuans_;
  mutable int _player_guanghuans_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > player_dress_;
  mutable int _player_dress_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > player_chenghaos_;
  mutable int _player_chenghaos_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > player_nalflags_;
  mutable int _player_nalflags_cached_byte_size_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 refresh_time_;
  ::google::protobuf::int32 sync_flag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lottery_5flist_2eeproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pvp_list_t

// uint64 guid = 1;
inline void pvp_list_t::clear_guid() {
  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 pvp_list_t::guid() const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.guid)
  return guid_;
}
inline void pvp_list_t::set_guid(::google::protobuf::uint64 value) {
  set_changed();
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.guid)
}

// repeated uint64 player_guids = 2;
inline int pvp_list_t::player_guids_size() const {
  return player_guids_.size();
}
inline void pvp_list_t::clear_player_guids() {
  set_changed();
  player_guids_.Clear();
}
inline ::google::protobuf::uint64 pvp_list_t::player_guids(int index) const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.player_guids)
  return player_guids_.Get(index);
}
inline void pvp_list_t::set_player_guids(int index, ::google::protobuf::uint64 value) {
  set_changed();
  player_guids_.Set(index, value);
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_guids)
}
inline void pvp_list_t::add_player_guids(::google::protobuf::uint64 value) {
  set_changed();
  player_guids_.Add(value);
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_guids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
pvp_list_t::player_guids() const {
  // @@protoc_insertion_point(field_list:dhc.pvp_list_t.player_guids)
  return player_guids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
pvp_list_t::mutable_player_guids() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:dhc.pvp_list_t.player_guids)
  return &player_guids_;
}

// repeated uint64 player_targets = 3;
inline int pvp_list_t::player_targets_size() const {
  return player_targets_.size();
}
inline void pvp_list_t::clear_player_targets() {
  set_changed();
  player_targets_.Clear();
}
inline ::google::protobuf::uint64 pvp_list_t::player_targets(int index) const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.player_targets)
  return player_targets_.Get(index);
}
inline void pvp_list_t::set_player_targets(int index, ::google::protobuf::uint64 value) {
  set_changed();
  player_targets_.Set(index, value);
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_targets)
}
inline void pvp_list_t::add_player_targets(::google::protobuf::uint64 value) {
  set_changed();
  player_targets_.Add(value);
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_targets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
pvp_list_t::player_targets() const {
  // @@protoc_insertion_point(field_list:dhc.pvp_list_t.player_targets)
  return player_targets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
pvp_list_t::mutable_player_targets() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:dhc.pvp_list_t.player_targets)
  return &player_targets_;
}

// repeated string player_names = 4;
inline int pvp_list_t::player_names_size() const {
  return player_names_.size();
}
inline void pvp_list_t::clear_player_names() {
  set_changed();
  player_names_.Clear();
}
inline const ::std::string& pvp_list_t::player_names(int index) const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.player_names)
  return player_names_.Get(index);
}
inline ::std::string* pvp_list_t::mutable_player_names(int index) {
  set_changed();
  // @@protoc_insertion_point(field_mutable:dhc.pvp_list_t.player_names)
  return player_names_.Mutable(index);
}
inline void pvp_list_t::set_player_names(int index, const ::std::string& value) {
  set_changed();
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_names)
  player_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void pvp_list_t::set_player_names(int index, ::std::string&& value) {
  set_changed();
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_names)
  player_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void pvp_list_t::set_player_names(int index, const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  player_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dhc.pvp_list_t.player_names)
}
inline void pvp_list_t::set_player_names(int index, const char* value, size_t size) {
  set_changed();
  player_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dhc.pvp_list_t.player_names)
}
inline ::std::string* pvp_list_t::add_player_names() {
  set_changed();
  // @@protoc_insertion_point(field_add_mutable:dhc.pvp_list_t.player_names)
  return player_names_.Add();
}
inline void pvp_list_t::add_player_names(const ::std::string& value) {
  set_changed();
  player_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_names)
}
#if LANG_CXX11
inline void pvp_list_t::add_player_names(::std::string&& value) {
  set_changed();
  player_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_names)
}
#endif
inline void pvp_list_t::add_player_names(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  player_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dhc.pvp_list_t.player_names)
}
inline void pvp_list_t::add_player_names(const char* value, size_t size) {
  set_changed();
  player_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dhc.pvp_list_t.player_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
pvp_list_t::player_names() const {
  // @@protoc_insertion_point(field_list:dhc.pvp_list_t.player_names)
  return player_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
pvp_list_t::mutable_player_names() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:dhc.pvp_list_t.player_names)
  return &player_names_;
}

// repeated int32 player_templates = 5;
inline int pvp_list_t::player_templates_size() const {
  return player_templates_.size();
}
inline void pvp_list_t::clear_player_templates() {
  set_changed();
  player_templates_.Clear();
}
inline ::google::protobuf::int32 pvp_list_t::player_templates(int index) const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.player_templates)
  return player_templates_.Get(index);
}
inline void pvp_list_t::set_player_templates(int index, ::google::protobuf::int32 value) {
  set_changed();
  player_templates_.Set(index, value);
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_templates)
}
inline void pvp_list_t::add_player_templates(::google::protobuf::int32 value) {
  set_changed();
  player_templates_.Add(value);
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_templates)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pvp_list_t::player_templates() const {
  // @@protoc_insertion_point(field_list:dhc.pvp_list_t.player_templates)
  return player_templates_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pvp_list_t::mutable_player_templates() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:dhc.pvp_list_t.player_templates)
  return &player_templates_;
}

// repeated int32 player_servers = 6;
inline int pvp_list_t::player_servers_size() const {
  return player_servers_.size();
}
inline void pvp_list_t::clear_player_servers() {
  set_changed();
  player_servers_.Clear();
}
inline ::google::protobuf::int32 pvp_list_t::player_servers(int index) const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.player_servers)
  return player_servers_.Get(index);
}
inline void pvp_list_t::set_player_servers(int index, ::google::protobuf::int32 value) {
  set_changed();
  player_servers_.Set(index, value);
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_servers)
}
inline void pvp_list_t::add_player_servers(::google::protobuf::int32 value) {
  set_changed();
  player_servers_.Add(value);
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_servers)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pvp_list_t::player_servers() const {
  // @@protoc_insertion_point(field_list:dhc.pvp_list_t.player_servers)
  return player_servers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pvp_list_t::mutable_player_servers() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:dhc.pvp_list_t.player_servers)
  return &player_servers_;
}

// repeated int32 player_bfs = 7;
inline int pvp_list_t::player_bfs_size() const {
  return player_bfs_.size();
}
inline void pvp_list_t::clear_player_bfs() {
  set_changed();
  player_bfs_.Clear();
}
inline ::google::protobuf::int32 pvp_list_t::player_bfs(int index) const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.player_bfs)
  return player_bfs_.Get(index);
}
inline void pvp_list_t::set_player_bfs(int index, ::google::protobuf::int32 value) {
  set_changed();
  player_bfs_.Set(index, value);
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_bfs)
}
inline void pvp_list_t::add_player_bfs(::google::protobuf::int32 value) {
  set_changed();
  player_bfs_.Add(value);
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_bfs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pvp_list_t::player_bfs() const {
  // @@protoc_insertion_point(field_list:dhc.pvp_list_t.player_bfs)
  return player_bfs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pvp_list_t::mutable_player_bfs() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:dhc.pvp_list_t.player_bfs)
  return &player_bfs_;
}

// repeated int32 player_pvps = 8;
inline int pvp_list_t::player_pvps_size() const {
  return player_pvps_.size();
}
inline void pvp_list_t::clear_player_pvps() {
  set_changed();
  player_pvps_.Clear();
}
inline ::google::protobuf::int32 pvp_list_t::player_pvps(int index) const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.player_pvps)
  return player_pvps_.Get(index);
}
inline void pvp_list_t::set_player_pvps(int index, ::google::protobuf::int32 value) {
  set_changed();
  player_pvps_.Set(index, value);
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_pvps)
}
inline void pvp_list_t::add_player_pvps(::google::protobuf::int32 value) {
  set_changed();
  player_pvps_.Add(value);
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_pvps)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pvp_list_t::player_pvps() const {
  // @@protoc_insertion_point(field_list:dhc.pvp_list_t.player_pvps)
  return player_pvps_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pvp_list_t::mutable_player_pvps() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:dhc.pvp_list_t.player_pvps)
  return &player_pvps_;
}

// repeated int32 player_wins = 9;
inline int pvp_list_t::player_wins_size() const {
  return player_wins_.size();
}
inline void pvp_list_t::clear_player_wins() {
  set_changed();
  player_wins_.Clear();
}
inline ::google::protobuf::int32 pvp_list_t::player_wins(int index) const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.player_wins)
  return player_wins_.Get(index);
}
inline void pvp_list_t::set_player_wins(int index, ::google::protobuf::int32 value) {
  set_changed();
  player_wins_.Set(index, value);
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_wins)
}
inline void pvp_list_t::add_player_wins(::google::protobuf::int32 value) {
  set_changed();
  player_wins_.Add(value);
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_wins)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pvp_list_t::player_wins() const {
  // @@protoc_insertion_point(field_list:dhc.pvp_list_t.player_wins)
  return player_wins_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pvp_list_t::mutable_player_wins() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:dhc.pvp_list_t.player_wins)
  return &player_wins_;
}

// repeated int32 player_vips = 10;
inline int pvp_list_t::player_vips_size() const {
  return player_vips_.size();
}
inline void pvp_list_t::clear_player_vips() {
  set_changed();
  player_vips_.Clear();
}
inline ::google::protobuf::int32 pvp_list_t::player_vips(int index) const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.player_vips)
  return player_vips_.Get(index);
}
inline void pvp_list_t::set_player_vips(int index, ::google::protobuf::int32 value) {
  set_changed();
  player_vips_.Set(index, value);
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_vips)
}
inline void pvp_list_t::add_player_vips(::google::protobuf::int32 value) {
  set_changed();
  player_vips_.Add(value);
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_vips)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pvp_list_t::player_vips() const {
  // @@protoc_insertion_point(field_list:dhc.pvp_list_t.player_vips)
  return player_vips_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pvp_list_t::mutable_player_vips() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:dhc.pvp_list_t.player_vips)
  return &player_vips_;
}

// repeated int32 player_achieves = 11;
inline int pvp_list_t::player_achieves_size() const {
  return player_achieves_.size();
}
inline void pvp_list_t::clear_player_achieves() {
  set_changed();
  player_achieves_.Clear();
}
inline ::google::protobuf::int32 pvp_list_t::player_achieves(int index) const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.player_achieves)
  return player_achieves_.Get(index);
}
inline void pvp_list_t::set_player_achieves(int index, ::google::protobuf::int32 value) {
  set_changed();
  player_achieves_.Set(index, value);
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_achieves)
}
inline void pvp_list_t::add_player_achieves(::google::protobuf::int32 value) {
  set_changed();
  player_achieves_.Add(value);
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_achieves)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pvp_list_t::player_achieves() const {
  // @@protoc_insertion_point(field_list:dhc.pvp_list_t.player_achieves)
  return player_achieves_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pvp_list_t::mutable_player_achieves() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:dhc.pvp_list_t.player_achieves)
  return &player_achieves_;
}

// repeated int32 player_guanghuans = 12;
inline int pvp_list_t::player_guanghuans_size() const {
  return player_guanghuans_.size();
}
inline void pvp_list_t::clear_player_guanghuans() {
  set_changed();
  player_guanghuans_.Clear();
}
inline ::google::protobuf::int32 pvp_list_t::player_guanghuans(int index) const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.player_guanghuans)
  return player_guanghuans_.Get(index);
}
inline void pvp_list_t::set_player_guanghuans(int index, ::google::protobuf::int32 value) {
  set_changed();
  player_guanghuans_.Set(index, value);
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_guanghuans)
}
inline void pvp_list_t::add_player_guanghuans(::google::protobuf::int32 value) {
  set_changed();
  player_guanghuans_.Add(value);
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_guanghuans)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pvp_list_t::player_guanghuans() const {
  // @@protoc_insertion_point(field_list:dhc.pvp_list_t.player_guanghuans)
  return player_guanghuans_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pvp_list_t::mutable_player_guanghuans() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:dhc.pvp_list_t.player_guanghuans)
  return &player_guanghuans_;
}

// repeated int32 player_dress = 13;
inline int pvp_list_t::player_dress_size() const {
  return player_dress_.size();
}
inline void pvp_list_t::clear_player_dress() {
  set_changed();
  player_dress_.Clear();
}
inline ::google::protobuf::int32 pvp_list_t::player_dress(int index) const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.player_dress)
  return player_dress_.Get(index);
}
inline void pvp_list_t::set_player_dress(int index, ::google::protobuf::int32 value) {
  set_changed();
  player_dress_.Set(index, value);
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_dress)
}
inline void pvp_list_t::add_player_dress(::google::protobuf::int32 value) {
  set_changed();
  player_dress_.Add(value);
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_dress)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pvp_list_t::player_dress() const {
  // @@protoc_insertion_point(field_list:dhc.pvp_list_t.player_dress)
  return player_dress_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pvp_list_t::mutable_player_dress() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:dhc.pvp_list_t.player_dress)
  return &player_dress_;
}

// repeated int32 player_chenghaos = 14;
inline int pvp_list_t::player_chenghaos_size() const {
  return player_chenghaos_.size();
}
inline void pvp_list_t::clear_player_chenghaos() {
  set_changed();
  player_chenghaos_.Clear();
}
inline ::google::protobuf::int32 pvp_list_t::player_chenghaos(int index) const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.player_chenghaos)
  return player_chenghaos_.Get(index);
}
inline void pvp_list_t::set_player_chenghaos(int index, ::google::protobuf::int32 value) {
  set_changed();
  player_chenghaos_.Set(index, value);
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_chenghaos)
}
inline void pvp_list_t::add_player_chenghaos(::google::protobuf::int32 value) {
  set_changed();
  player_chenghaos_.Add(value);
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_chenghaos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pvp_list_t::player_chenghaos() const {
  // @@protoc_insertion_point(field_list:dhc.pvp_list_t.player_chenghaos)
  return player_chenghaos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pvp_list_t::mutable_player_chenghaos() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:dhc.pvp_list_t.player_chenghaos)
  return &player_chenghaos_;
}

// repeated int32 player_nalflags = 15;
inline int pvp_list_t::player_nalflags_size() const {
  return player_nalflags_.size();
}
inline void pvp_list_t::clear_player_nalflags() {
  set_changed();
  player_nalflags_.Clear();
}
inline ::google::protobuf::int32 pvp_list_t::player_nalflags(int index) const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.player_nalflags)
  return player_nalflags_.Get(index);
}
inline void pvp_list_t::set_player_nalflags(int index, ::google::protobuf::int32 value) {
  set_changed();
  player_nalflags_.Set(index, value);
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.player_nalflags)
}
inline void pvp_list_t::add_player_nalflags(::google::protobuf::int32 value) {
  set_changed();
  player_nalflags_.Add(value);
  // @@protoc_insertion_point(field_add:dhc.pvp_list_t.player_nalflags)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pvp_list_t::player_nalflags() const {
  // @@protoc_insertion_point(field_list:dhc.pvp_list_t.player_nalflags)
  return player_nalflags_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pvp_list_t::mutable_player_nalflags() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:dhc.pvp_list_t.player_nalflags)
  return &player_nalflags_;
}

// uint64 refresh_time = 16;
inline void pvp_list_t::clear_refresh_time() {
  set_changed();
  refresh_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 pvp_list_t::refresh_time() const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.refresh_time)
  return refresh_time_;
}
inline void pvp_list_t::set_refresh_time(::google::protobuf::uint64 value) {
  set_changed();
  
  refresh_time_ = value;
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.refresh_time)
}

// int32 sync_flag = 17;
inline void pvp_list_t::clear_sync_flag() {
  set_changed();
  sync_flag_ = 0;
}
inline ::google::protobuf::int32 pvp_list_t::sync_flag() const {
  // @@protoc_insertion_point(field_get:dhc.pvp_list_t.sync_flag)
  return sync_flag_;
}
inline void pvp_list_t::set_sync_flag(::google::protobuf::int32 value) {
  set_changed();
  
  sync_flag_ = value;
  // @@protoc_insertion_point(field_set:dhc.pvp_list_t.sync_flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dhc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_lottery_5flist_2eeproto
