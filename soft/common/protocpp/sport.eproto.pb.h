// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sport.eproto

#ifndef PROTOBUF_INCLUDED_sport_2eeproto
#define PROTOBUF_INCLUDED_sport_2eeproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sport_2eeproto 

namespace protobuf_sport_2eeproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sport_2eeproto
namespace dhc {
class sport_t;
class sport_tDefaultTypeInternal;
extern sport_tDefaultTypeInternal _sport_t_default_instance_;
}  // namespace dhc
namespace google {
namespace protobuf {
template<> ::dhc::sport_t* Arena::CreateMaybeMessage<::dhc::sport_t>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dhc {

// ===================================================================

class sport_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dhc.sport_t) */ {
 public:
  sport_t();
  virtual ~sport_t();

  sport_t(const sport_t& from);

  inline sport_t& operator=(const sport_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sport_t(sport_t&& from) noexcept
    : sport_t() {
    *this = ::std::move(from);
  }

  inline sport_t& operator=(sport_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const sport_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sport_t* internal_default_instance() {
    return reinterpret_cast<const sport_t*>(
               &_sport_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(sport_t* other);
  friend void swap(sport_t& a, sport_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sport_t* New() const final {
    return CreateMaybeMessage<sport_t>(NULL);
  }

  sport_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sport_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sport_t& from);
  void MergeFrom(const sport_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sport_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes other_name = 6;
  void clear_other_name();
  static const int kOtherNameFieldNumber = 6;
  const ::std::string& other_name() const;
  void set_other_name(const ::std::string& value);
  #if LANG_CXX11
  void set_other_name(::std::string&& value);
  #endif
  void set_other_name(const char* value);
  void set_other_name(const void* value, size_t size);
  ::std::string* mutable_other_name();
  ::std::string* release_other_name();
  void set_allocated_other_name(::std::string* other_name);

  // bytes text = 9;
  void clear_text();
  static const int kTextFieldNumber = 9;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const void* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // uint64 guid = 1;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // uint64 player_guid = 2;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 2;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // uint64 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // uint64 other_guid = 5;
  void clear_other_guid();
  static const int kOtherGuidFieldNumber = 5;
  ::google::protobuf::uint64 other_guid() const;
  void set_other_guid(::google::protobuf::uint64 value);

  // int32 type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 win = 7;
  void clear_win();
  static const int kWinFieldNumber = 7;
  ::google::protobuf::int32 win() const;
  void set_win(::google::protobuf::int32 value);

  // int32 rank = 8;
  void clear_rank();
  static const int kRankFieldNumber = 8;
  ::google::protobuf::int32 rank() const;
  void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dhc.sport_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr other_name_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint64 other_guid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 win_;
  ::google::protobuf::int32 rank_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sport_2eeproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// sport_t

// uint64 guid = 1;
inline void sport_t::clear_guid() {
  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 sport_t::guid() const {
  // @@protoc_insertion_point(field_get:dhc.sport_t.guid)
  return guid_;
}
inline void sport_t::set_guid(::google::protobuf::uint64 value) {
  set_changed();
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:dhc.sport_t.guid)
}

// uint64 player_guid = 2;
inline void sport_t::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 sport_t::player_guid() const {
  // @@protoc_insertion_point(field_get:dhc.sport_t.player_guid)
  return player_guid_;
}
inline void sport_t::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:dhc.sport_t.player_guid)
}

// uint64 time = 3;
inline void sport_t::clear_time() {
  set_changed();
  time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 sport_t::time() const {
  // @@protoc_insertion_point(field_get:dhc.sport_t.time)
  return time_;
}
inline void sport_t::set_time(::google::protobuf::uint64 value) {
  set_changed();
  
  time_ = value;
  // @@protoc_insertion_point(field_set:dhc.sport_t.time)
}

// int32 type = 4;
inline void sport_t::clear_type() {
  set_changed();
  type_ = 0;
}
inline ::google::protobuf::int32 sport_t::type() const {
  // @@protoc_insertion_point(field_get:dhc.sport_t.type)
  return type_;
}
inline void sport_t::set_type(::google::protobuf::int32 value) {
  set_changed();
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dhc.sport_t.type)
}

// uint64 other_guid = 5;
inline void sport_t::clear_other_guid() {
  set_changed();
  other_guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 sport_t::other_guid() const {
  // @@protoc_insertion_point(field_get:dhc.sport_t.other_guid)
  return other_guid_;
}
inline void sport_t::set_other_guid(::google::protobuf::uint64 value) {
  set_changed();
  
  other_guid_ = value;
  // @@protoc_insertion_point(field_set:dhc.sport_t.other_guid)
}

// bytes other_name = 6;
inline void sport_t::clear_other_name() {
  set_changed();
  other_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sport_t::other_name() const {
  // @@protoc_insertion_point(field_get:dhc.sport_t.other_name)
  return other_name_.GetNoArena();
}
inline void sport_t::set_other_name(const ::std::string& value) {
  set_changed();
  
  other_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dhc.sport_t.other_name)
}
#if LANG_CXX11
inline void sport_t::set_other_name(::std::string&& value) {
  set_changed();
  
  other_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dhc.sport_t.other_name)
}
#endif
inline void sport_t::set_other_name(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  
  other_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dhc.sport_t.other_name)
}
inline void sport_t::set_other_name(const void* value, size_t size) {
  set_changed();
  
  other_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dhc.sport_t.other_name)
}
inline ::std::string* sport_t::mutable_other_name() {
  set_changed();
  
  // @@protoc_insertion_point(field_mutable:dhc.sport_t.other_name)
  return other_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sport_t::release_other_name() {
  set_changed();
  // @@protoc_insertion_point(field_release:dhc.sport_t.other_name)
  
  return other_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sport_t::set_allocated_other_name(::std::string* other_name) {
  set_changed();
  if (other_name != NULL) {
    
  } else {
    
  }
  other_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), other_name);
  // @@protoc_insertion_point(field_set_allocated:dhc.sport_t.other_name)
}

// int32 win = 7;
inline void sport_t::clear_win() {
  set_changed();
  win_ = 0;
}
inline ::google::protobuf::int32 sport_t::win() const {
  // @@protoc_insertion_point(field_get:dhc.sport_t.win)
  return win_;
}
inline void sport_t::set_win(::google::protobuf::int32 value) {
  set_changed();
  
  win_ = value;
  // @@protoc_insertion_point(field_set:dhc.sport_t.win)
}

// int32 rank = 8;
inline void sport_t::clear_rank() {
  set_changed();
  rank_ = 0;
}
inline ::google::protobuf::int32 sport_t::rank() const {
  // @@protoc_insertion_point(field_get:dhc.sport_t.rank)
  return rank_;
}
inline void sport_t::set_rank(::google::protobuf::int32 value) {
  set_changed();
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:dhc.sport_t.rank)
}

// bytes text = 9;
inline void sport_t::clear_text() {
  set_changed();
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sport_t::text() const {
  // @@protoc_insertion_point(field_get:dhc.sport_t.text)
  return text_.GetNoArena();
}
inline void sport_t::set_text(const ::std::string& value) {
  set_changed();
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dhc.sport_t.text)
}
#if LANG_CXX11
inline void sport_t::set_text(::std::string&& value) {
  set_changed();
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dhc.sport_t.text)
}
#endif
inline void sport_t::set_text(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dhc.sport_t.text)
}
inline void sport_t::set_text(const void* value, size_t size) {
  set_changed();
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dhc.sport_t.text)
}
inline ::std::string* sport_t::mutable_text() {
  set_changed();
  
  // @@protoc_insertion_point(field_mutable:dhc.sport_t.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sport_t::release_text() {
  set_changed();
  // @@protoc_insertion_point(field_release:dhc.sport_t.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sport_t::set_allocated_text(::std::string* text) {
  set_changed();
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:dhc.sport_t.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dhc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sport_2eeproto
