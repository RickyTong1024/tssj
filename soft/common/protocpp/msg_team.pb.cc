// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_team.proto

#include "msg_team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_equip_2eeproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_equip_2eeproto ::google::protobuf::internal::SCCInfo<0> scc_info_equip_t;
}  // namespace protobuf_equip_2eeproto
namespace protobuf_msg_5fteam_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fteam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_bingyuan_huihe;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fteam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_team_invite;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fteam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_team_player;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fteam_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_bingyuan_fight_text;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fteam_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_team;
}  // namespace protobuf_msg_5fteam_2eproto
namespace protobuf_role_2eeproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_role_2eeproto ::google::protobuf::internal::SCCInfo<0> scc_info_role_t;
}  // namespace protobuf_role_2eeproto
namespace protobuf_treasure_2eeproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_treasure_2eeproto ::google::protobuf::internal::SCCInfo<0> scc_info_treasure_t;
}  // namespace protobuf_treasure_2eeproto
namespace protocol {
namespace team {
class team_playerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<team_player>
      _instance;
} _team_player_default_instance_;
class teamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<team>
      _instance;
} _team_default_instance_;
class team_inviteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<team_invite>
      _instance;
} _team_invite_default_instance_;
class bingyuan_huiheDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bingyuan_huihe>
      _instance;
} _bingyuan_huihe_default_instance_;
class bingyuan_fight_textDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bingyuan_fight_text>
      _instance;
} _bingyuan_fight_text_default_instance_;
class cmsg_enter_worldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_enter_world>
      _instance;
} _cmsg_enter_world_default_instance_;
class smsg_enter_worldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_enter_world>
      _instance;
} _smsg_enter_world_default_instance_;
class smsg_team_createDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_team_create>
      _instance;
} _smsg_team_create_default_instance_;
class cmsg_team_enterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_team_enter>
      _instance;
} _cmsg_team_enter_default_instance_;
class smsg_team_enterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_team_enter>
      _instance;
} _smsg_team_enter_default_instance_;
class smsg_team_leaveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_team_leave>
      _instance;
} _smsg_team_leave_default_instance_;
class cmsg_team_kickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_team_kick>
      _instance;
} _cmsg_team_kick_default_instance_;
class smsg_team_prepareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_team_prepare>
      _instance;
} _smsg_team_prepare_default_instance_;
class cmsg_team_moveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_team_move>
      _instance;
} _cmsg_team_move_default_instance_;
class smsg_team_moveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_team_move>
      _instance;
} _smsg_team_move_default_instance_;
class smsg_fight_teamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_fight_team>
      _instance;
} _smsg_fight_team_default_instance_;
class cmsg_chat_teamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_chat_team>
      _instance;
} _cmsg_chat_team_default_instance_;
class smsg_chat_teamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_chat_team>
      _instance;
} _smsg_chat_team_default_instance_;
class cmsg_player_lookDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_player_look>
      _instance;
} _cmsg_player_look_default_instance_;
class smsg_player_lookDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_player_look>
      _instance;
} _smsg_player_look_default_instance_;
class smsg_invite_addDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_invite_add>
      _instance;
} _smsg_invite_add_default_instance_;
class cmsg_invite_agreeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_invite_agree>
      _instance;
} _cmsg_invite_agree_default_instance_;
class smsg_invite_removeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_invite_remove>
      _instance;
} _smsg_invite_remove_default_instance_;
class smsg_invite_remove_socialDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_invite_remove_social>
      _instance;
} _smsg_invite_remove_social_default_instance_;
class smsg_invite_allDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_invite_all>
      _instance;
} _smsg_invite_all_default_instance_;
class smsg_team_player_reward_changeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_team_player_reward_change>
      _instance;
} _smsg_team_player_reward_change_default_instance_;
class smsg_change_team_statDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_change_team_stat>
      _instance;
} _smsg_change_team_stat_default_instance_;
class cmsg_hanhuaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_hanhua>
      _instance;
} _cmsg_hanhua_default_instance_;
class smsg_hanhuaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_hanhua>
      _instance;
} _smsg_hanhua_default_instance_;
class cmsg_change_hanhuaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_change_hanhua>
      _instance;
} _cmsg_change_hanhua_default_instance_;
class smsg_fight_dsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_fight_ds>
      _instance;
} _smsg_fight_ds_default_instance_;
class smsg_reset_dsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_reset_ds>
      _instance;
} _smsg_reset_ds_default_instance_;
}  // namespace team
}  // namespace protocol
namespace protobuf_msg_5fteam_2eproto {
static void InitDefaultsteam_player() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_team_player_default_instance_;
    new (ptr) ::protocol::team::team_player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::team_player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_team_player =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsteam_player}, {}};

static void InitDefaultsteam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_team_default_instance_;
    new (ptr) ::protocol::team::team();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::team::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_team =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsteam}, {
      &protobuf_msg_5fteam_2eproto::scc_info_team_player.base,}};

static void InitDefaultsteam_invite() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_team_invite_default_instance_;
    new (ptr) ::protocol::team::team_invite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::team_invite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_team_invite =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsteam_invite}, {}};

static void InitDefaultsbingyuan_huihe() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_bingyuan_huihe_default_instance_;
    new (ptr) ::protocol::team::bingyuan_huihe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::bingyuan_huihe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_bingyuan_huihe =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbingyuan_huihe}, {}};

static void InitDefaultsbingyuan_fight_text() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_bingyuan_fight_text_default_instance_;
    new (ptr) ::protocol::team::bingyuan_fight_text();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::bingyuan_fight_text::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_bingyuan_fight_text =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsbingyuan_fight_text}, {
      &protobuf_msg_5fteam_2eproto::scc_info_bingyuan_huihe.base,}};

static void InitDefaultscmsg_enter_world() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_cmsg_enter_world_default_instance_;
    new (ptr) ::protocol::team::cmsg_enter_world();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::cmsg_enter_world::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_enter_world =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_enter_world}, {}};

static void InitDefaultssmsg_enter_world() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_enter_world_default_instance_;
    new (ptr) ::protocol::team::smsg_enter_world();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_enter_world::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_smsg_enter_world =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultssmsg_enter_world}, {
      &protobuf_msg_5fteam_2eproto::scc_info_team_invite.base,}};

static void InitDefaultssmsg_team_create() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_team_create_default_instance_;
    new (ptr) ::protocol::team::smsg_team_create();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_team_create::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_smsg_team_create =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultssmsg_team_create}, {
      &protobuf_msg_5fteam_2eproto::scc_info_team.base,}};

static void InitDefaultscmsg_team_enter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_cmsg_team_enter_default_instance_;
    new (ptr) ::protocol::team::cmsg_team_enter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::cmsg_team_enter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_team_enter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_team_enter}, {}};

static void InitDefaultssmsg_team_enter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_team_enter_default_instance_;
    new (ptr) ::protocol::team::smsg_team_enter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_team_enter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_smsg_team_enter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultssmsg_team_enter}, {
      &protobuf_msg_5fteam_2eproto::scc_info_team_player.base,}};

static void InitDefaultssmsg_team_leave() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_team_leave_default_instance_;
    new (ptr) ::protocol::team::smsg_team_leave();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_team_leave::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_team_leave =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_team_leave}, {}};

static void InitDefaultscmsg_team_kick() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_cmsg_team_kick_default_instance_;
    new (ptr) ::protocol::team::cmsg_team_kick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::cmsg_team_kick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_team_kick =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_team_kick}, {}};

static void InitDefaultssmsg_team_prepare() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_team_prepare_default_instance_;
    new (ptr) ::protocol::team::smsg_team_prepare();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_team_prepare::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_team_prepare =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_team_prepare}, {}};

static void InitDefaultscmsg_team_move() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_cmsg_team_move_default_instance_;
    new (ptr) ::protocol::team::cmsg_team_move();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::cmsg_team_move::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_team_move =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_team_move}, {}};

static void InitDefaultssmsg_team_move() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_team_move_default_instance_;
    new (ptr) ::protocol::team::smsg_team_move();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_team_move::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_team_move =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_team_move}, {}};

static void InitDefaultssmsg_fight_team() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_fight_team_default_instance_;
    new (ptr) ::protocol::team::smsg_fight_team();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_fight_team::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_smsg_fight_team =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultssmsg_fight_team}, {
      &protobuf_msg_5fteam_2eproto::scc_info_bingyuan_fight_text.base,
      &protobuf_msg_5fteam_2eproto::scc_info_team.base,}};

static void InitDefaultscmsg_chat_team() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_cmsg_chat_team_default_instance_;
    new (ptr) ::protocol::team::cmsg_chat_team();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::cmsg_chat_team::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_chat_team =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_chat_team}, {}};

static void InitDefaultssmsg_chat_team() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_chat_team_default_instance_;
    new (ptr) ::protocol::team::smsg_chat_team();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_chat_team::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_chat_team =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_chat_team}, {}};

static void InitDefaultscmsg_player_look() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_cmsg_player_look_default_instance_;
    new (ptr) ::protocol::team::cmsg_player_look();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::cmsg_player_look::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_player_look =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_player_look}, {}};

static void InitDefaultssmsg_player_look() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_player_look_default_instance_;
    new (ptr) ::protocol::team::smsg_player_look();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_player_look::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_smsg_player_look =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultssmsg_player_look}, {
      &protobuf_role_2eeproto::scc_info_role_t.base,
      &protobuf_equip_2eeproto::scc_info_equip_t.base,
      &protobuf_treasure_2eeproto::scc_info_treasure_t.base,}};

static void InitDefaultssmsg_invite_add() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_invite_add_default_instance_;
    new (ptr) ::protocol::team::smsg_invite_add();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_invite_add::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_smsg_invite_add =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultssmsg_invite_add}, {
      &protobuf_msg_5fteam_2eproto::scc_info_team_invite.base,}};

static void InitDefaultscmsg_invite_agree() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_cmsg_invite_agree_default_instance_;
    new (ptr) ::protocol::team::cmsg_invite_agree();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::cmsg_invite_agree::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_invite_agree =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_invite_agree}, {}};

static void InitDefaultssmsg_invite_remove() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_invite_remove_default_instance_;
    new (ptr) ::protocol::team::smsg_invite_remove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_invite_remove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_invite_remove =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_invite_remove}, {}};

static void InitDefaultssmsg_invite_remove_social() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_invite_remove_social_default_instance_;
    new (ptr) ::protocol::team::smsg_invite_remove_social();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_invite_remove_social::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_invite_remove_social =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_invite_remove_social}, {}};

static void InitDefaultssmsg_invite_all() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_invite_all_default_instance_;
    new (ptr) ::protocol::team::smsg_invite_all();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_invite_all::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_invite_all =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_invite_all}, {}};

static void InitDefaultssmsg_team_player_reward_change() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_team_player_reward_change_default_instance_;
    new (ptr) ::protocol::team::smsg_team_player_reward_change();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_team_player_reward_change::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_team_player_reward_change =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_team_player_reward_change}, {}};

static void InitDefaultssmsg_change_team_stat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_change_team_stat_default_instance_;
    new (ptr) ::protocol::team::smsg_change_team_stat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_change_team_stat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_change_team_stat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_change_team_stat}, {}};

static void InitDefaultscmsg_hanhua() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_cmsg_hanhua_default_instance_;
    new (ptr) ::protocol::team::cmsg_hanhua();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::cmsg_hanhua::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_hanhua =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_hanhua}, {}};

static void InitDefaultssmsg_hanhua() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_hanhua_default_instance_;
    new (ptr) ::protocol::team::smsg_hanhua();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_hanhua::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_hanhua =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_hanhua}, {}};

static void InitDefaultscmsg_change_hanhua() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_cmsg_change_hanhua_default_instance_;
    new (ptr) ::protocol::team::cmsg_change_hanhua();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::cmsg_change_hanhua::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_change_hanhua =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_change_hanhua}, {}};

static void InitDefaultssmsg_fight_ds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_fight_ds_default_instance_;
    new (ptr) ::protocol::team::smsg_fight_ds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_fight_ds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_fight_ds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_fight_ds}, {}};

static void InitDefaultssmsg_reset_ds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::team::_smsg_reset_ds_default_instance_;
    new (ptr) ::protocol::team::smsg_reset_ds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::team::smsg_reset_ds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_reset_ds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_reset_ds}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_team_player.base);
  ::google::protobuf::internal::InitSCC(&scc_info_team.base);
  ::google::protobuf::internal::InitSCC(&scc_info_team_invite.base);
  ::google::protobuf::internal::InitSCC(&scc_info_bingyuan_huihe.base);
  ::google::protobuf::internal::InitSCC(&scc_info_bingyuan_fight_text.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_enter_world.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_enter_world.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_team_create.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_team_enter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_team_enter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_team_leave.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_team_kick.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_team_prepare.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_team_move.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_team_move.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_fight_team.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_chat_team.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_chat_team.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_player_look.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_player_look.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_invite_add.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_invite_agree.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_invite_remove.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_invite_remove_social.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_invite_all.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_team_player_reward_change.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_change_team_stat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_hanhua.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_hanhua.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_change_hanhua.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_fight_ds.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_reset_ds.base);
}

::google::protobuf::Metadata file_level_metadata[32];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, bf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, chenhao_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, prepare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, reward_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, is_npc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, kill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, vip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, achieve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, guanghuan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, dress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, invites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, bind_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_player, nalflag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team, jiacheng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team, stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team, fight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_invite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_invite, invite_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_invite, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_invite, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_invite, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_invite, chenghao_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_invite, bf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_invite, guild_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_invite, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_invite, vip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_invite, achieve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_invite, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_invite, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::team_invite, nalflag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::bingyuan_huihe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::bingyuan_huihe, team_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::bingyuan_huihe, team_guids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::bingyuan_huihe, max_hps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::bingyuan_huihe, hps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::bingyuan_huihe, win_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::bingyuan_fight_text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::bingyuan_fight_text, huihes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_enter_world, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_enter_world, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_enter_world, sig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_enter_world, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_enter_world, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_enter_world, chenghao_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_enter_world, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_enter_world, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_enter_world, next_invite_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_enter_world, invites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_enter_world, talks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_enter_world, srank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_enter_world, sgrank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_enter_world, spoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_enter_world, sduanwei_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_enter_world, sreset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_enter_world, soduanwei_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_enter_world, ds_cdtime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_create, team_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_team_enter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_team_enter, team_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_enter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_enter, member_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_enter, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_enter, jiacheng_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_leave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_leave, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_leave, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_leave, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_leave, jiacheng_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_team_kick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_team_kick, guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_prepare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_prepare, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_prepare, prepare_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_team_move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_team_move, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_team_move, index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_move, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_move, index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_team, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_team, win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_team, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_team, oteam_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_chat_team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_chat_team, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_chat_team, color_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_chat_team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_chat_team, player_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_chat_team, player_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_chat_team, player_template_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_chat_team, vip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_chat_team, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_chat_team, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_chat_team, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_chat_team, player_nalflag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_player_look, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_player_look, guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_player_look, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_player_look, template_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_player_look, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_player_look, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_player_look, bf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_player_look, vip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_player_look, roles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_player_look, equips_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_player_look, treasures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_player_look, duixings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_player_look, guild_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_player_look, achieves_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_player_look, nalflag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_invite_add, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_invite_add, invite_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_invite_agree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_invite_agree, agree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_invite_agree, invite_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_invite_remove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_invite_remove, invite_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_invite_remove_social, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_invite_remove_social, guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_invite_all, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_invite_all, next_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_player_reward_change, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_player_reward_change, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_player_reward_change, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_player_reward_change, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_player_reward_change, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_team_player_reward_change, chenghao_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_change_team_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_change_team_stat, stat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_hanhua, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_hanhua, index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_hanhua, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_hanhua, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_hanhua, guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_change_hanhua, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_change_hanhua, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::cmsg_change_hanhua, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_ds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_ds, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_ds, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_ds, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_ds, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_ds, duanwei_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_ds, bf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_ds, template_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_ds, vip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_ds, achieve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_ds, guanghuan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_ds, dress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_fight_ds, cd_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_reset_ds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_reset_ds, oldduanwei_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::team::smsg_reset_ds, newduanwei_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::team::team_player)},
  { 24, -1, sizeof(::protocol::team::team)},
  { 37, -1, sizeof(::protocol::team::team_invite)},
  { 55, -1, sizeof(::protocol::team::bingyuan_huihe)},
  { 65, -1, sizeof(::protocol::team::bingyuan_fight_text)},
  { 71, -1, sizeof(::protocol::team::cmsg_enter_world)},
  { 79, -1, sizeof(::protocol::team::smsg_enter_world)},
  { 97, -1, sizeof(::protocol::team::smsg_team_create)},
  { 103, -1, sizeof(::protocol::team::cmsg_team_enter)},
  { 109, -1, sizeof(::protocol::team::smsg_team_enter)},
  { 117, -1, sizeof(::protocol::team::smsg_team_leave)},
  { 126, -1, sizeof(::protocol::team::cmsg_team_kick)},
  { 132, -1, sizeof(::protocol::team::smsg_team_prepare)},
  { 139, -1, sizeof(::protocol::team::cmsg_team_move)},
  { 146, -1, sizeof(::protocol::team::smsg_team_move)},
  { 153, -1, sizeof(::protocol::team::smsg_fight_team)},
  { 162, -1, sizeof(::protocol::team::cmsg_chat_team)},
  { 169, -1, sizeof(::protocol::team::smsg_chat_team)},
  { 182, -1, sizeof(::protocol::team::cmsg_player_look)},
  { 188, -1, sizeof(::protocol::team::smsg_player_look)},
  { 205, -1, sizeof(::protocol::team::smsg_invite_add)},
  { 211, -1, sizeof(::protocol::team::cmsg_invite_agree)},
  { 218, -1, sizeof(::protocol::team::smsg_invite_remove)},
  { 224, -1, sizeof(::protocol::team::smsg_invite_remove_social)},
  { 230, -1, sizeof(::protocol::team::smsg_invite_all)},
  { 236, -1, sizeof(::protocol::team::smsg_team_player_reward_change)},
  { 246, -1, sizeof(::protocol::team::smsg_change_team_stat)},
  { 252, -1, sizeof(::protocol::team::cmsg_hanhua)},
  { 258, -1, sizeof(::protocol::team::smsg_hanhua)},
  { 265, -1, sizeof(::protocol::team::cmsg_change_hanhua)},
  { 272, -1, sizeof(::protocol::team::smsg_fight_ds)},
  { 289, -1, sizeof(::protocol::team::smsg_reset_ds)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_team_player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_team_invite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_bingyuan_huihe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_bingyuan_fight_text_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_cmsg_enter_world_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_enter_world_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_team_create_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_cmsg_team_enter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_team_enter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_team_leave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_cmsg_team_kick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_team_prepare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_cmsg_team_move_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_team_move_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_fight_team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_cmsg_chat_team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_chat_team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_cmsg_player_look_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_player_look_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_invite_add_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_cmsg_invite_agree_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_invite_remove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_invite_remove_social_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_invite_all_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_team_player_reward_change_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_change_team_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_cmsg_hanhua_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_hanhua_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_cmsg_change_hanhua_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_fight_ds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::team::_smsg_reset_ds_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "msg_team.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 32);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016msg_team.proto\022\rprotocol.team\032\013role.ep"
      "roto\032\014equip.eproto\032\017treasure.eproto\"\273\002\n\013"
      "team_player\022\014\n\004guid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022"
      "\n\n\002id\030\003 \001(\005\022\n\n\002bf\030\004 \001(\005\022\017\n\007chenhao\030\005 \001(\005"
      "\022\r\n\005level\030\006 \001(\005\022\016\n\006leader\030\007 \001(\010\022\017\n\007prepa"
      "re\030\010 \001(\010\022\022\n\nreward_num\030\t \001(\005\022\016\n\006is_npc\030\n"
      " \001(\010\022\020\n\010serverid\030\013 \001(\005\022\014\n\004kill\030\014 \001(\005\022\013\n\003"
      "vip\030\r \001(\005\022\017\n\007achieve\030\016 \001(\005\022\021\n\tguanghuan\030"
      "\017 \001(\005\022\r\n\005dress\030\020 \001(\005\022\017\n\007invites\030\021 \003(\004\022\021\n"
      "\tbind_guid\030\022 \001(\004\022\017\n\007nalflag\030\023 \001(\005\"\240\001\n\004te"
      "am\022\017\n\007team_id\030\001 \001(\004\022+\n\007players\030\002 \003(\0132\032.p"
      "rotocol.team.team_player\022\014\n\004open\030\003 \001(\010\022\r"
      "\n\005level\030\004 \001(\005\022\020\n\010jiacheng\030\005 \001(\005\022\016\n\006resul"
      "t\030\006 \001(\010\022\014\n\004stat\030\007 \001(\005\022\r\n\005fight\030\010 \001(\010\"\322\001\n"
      "\013team_invite\022\021\n\tinvite_id\030\001 \001(\004\022\014\n\004guid\030"
      "\002 \001(\004\022\014\n\004name\030\003 \001(\t\022\n\n\002id\030\004 \001(\005\022\020\n\010cheng"
      "hao\030\005 \001(\005\022\n\n\002bf\030\006 \001(\005\022\r\n\005guild\030\007 \001(\t\022\r\n\005"
      "level\030\010 \001(\005\022\013\n\003vip\030\t \001(\005\022\017\n\007achieve\030\n \001("
      "\005\022\017\n\007team_id\030\013 \001(\004\022\014\n\004time\030\014 \001(\005\022\017\n\007nalf"
      "lag\030\r \001(\005\"a\n\016bingyuan_huihe\022\020\n\010team_ids\030"
      "\001 \003(\004\022\022\n\nteam_guids\030\002 \003(\004\022\017\n\007max_hps\030\003 \003"
      "(\001\022\013\n\003hps\030\004 \003(\001\022\013\n\003win\030\005 \001(\004\"D\n\023bingyuan"
      "_fight_text\022-\n\006huihes\030\001 \003(\0132\035.protocol.t"
      "eam.bingyuan_huihe\";\n\020cmsg_enter_world\022\014"
      "\n\004guid\030\001 \001(\004\022\013\n\003sig\030\002 \001(\t\022\014\n\004type\030\003 \001(\005\""
      "\216\002\n\020smsg_enter_world\022\020\n\010chenghao\030\001 \001(\005\022\r"
      "\n\005point\030\002 \001(\005\022\014\n\004rank\030\003 \001(\005\022\030\n\020next_invi"
      "te_time\030\004 \001(\004\022+\n\007invites\030\005 \003(\0132\032.protoco"
      "l.team.team_invite\022\r\n\005talks\030\006 \003(\t\022\r\n\005sra"
      "nk\030\007 \001(\005\022\016\n\006sgrank\030\010 \001(\005\022\016\n\006spoint\030\t \001(\005"
      "\022\020\n\010sduanwei\030\n \001(\005\022\016\n\006sreset\030\013 \001(\010\022\021\n\tso"
      "duanwei\030\014 \001(\005\022\021\n\tds_cdtime\030\r \001(\004\":\n\020smsg"
      "_team_create\022&\n\tteam_info\030\001 \001(\0132\023.protoc"
      "ol.team.team\"\"\n\017cmsg_team_enter\022\017\n\007team_"
      "id\030\001 \001(\004\"^\n\017smsg_team_enter\022*\n\006member\030\001 "
      "\001(\0132\032.protocol.team.team_player\022\r\n\005level"
      "\030\002 \001(\005\022\020\n\010jiacheng\030\003 \001(\005\"P\n\017smsg_team_le"
      "ave\022\014\n\004guid\030\001 \001(\004\022\016\n\006leader\030\002 \001(\004\022\r\n\005lev"
      "el\030\003 \001(\005\022\020\n\010jiacheng\030\004 \001(\005\"\036\n\016cmsg_team_"
      "kick\022\014\n\004guid\030\001 \001(\004\"2\n\021smsg_team_prepare\022"
      "\014\n\004guid\030\001 \001(\004\022\017\n\007prepare\030\002 \001(\010\"-\n\016cmsg_t"
      "eam_move\022\014\n\004guid\030\001 \001(\004\022\r\n\005index\030\002 \001(\005\"-\n"
      "\016smsg_team_move\022\014\n\004guid\030\001 \001(\004\022\r\n\005index\030\002"
      " \001(\005\"\200\001\n\017smsg_fight_team\022\n\n\002id\030\001 \001(\004\022\013\n\003"
      "win\030\002 \001(\004\0220\n\004text\030\003 \001(\0132\".protocol.team."
      "bingyuan_fight_text\022\"\n\005oteam\030\004 \001(\0132\023.pro"
      "tocol.team.team\"-\n\016cmsg_chat_team\022\014\n\004tex"
      "t\030\003 \001(\t\022\r\n\005color\030\004 \001(\t\"\244\001\n\016smsg_chat_tea"
      "m\022\023\n\013player_guid\030\001 \001(\004\022\023\n\013player_name\030\002 "
      "\001(\t\022\027\n\017player_template\030\003 \001(\r\022\013\n\003vip\030\004 \001("
      "\005\022\r\n\005level\030\005 \001(\005\022\014\n\004text\030\006 \001(\t\022\r\n\005color\030"
      "\007 \001(\t\022\026\n\016player_nalflag\030\010 \001(\005\" \n\020cmsg_pl"
      "ayer_look\022\014\n\004guid\030\001 \001(\004\"\377\001\n\020smsg_player_"
      "look\022\023\n\013template_id\030\001 \001(\r\022\r\n\005level\030\002 \001(\005"
      "\022\014\n\004name\030\003 \001(\t\022\n\n\002bf\030\004 \001(\005\022\013\n\003vip\030\005 \001(\005\022"
      "\032\n\005roles\030\006 \003(\0132\013.dhc.role_t\022\034\n\006equips\030\007 "
      "\003(\0132\014.dhc.equip_t\022\"\n\ttreasures\030\010 \003(\0132\017.d"
      "hc.treasure_t\022\020\n\010duixings\030\t \003(\005\022\r\n\005guild"
      "\030\n \001(\t\022\020\n\010achieves\030\013 \001(\005\022\017\n\007nalflag\030\014 \001("
      "\005\"=\n\017smsg_invite_add\022*\n\006invite\030\001 \001(\0132\032.p"
      "rotocol.team.team_invite\"5\n\021cmsg_invite_"
      "agree\022\r\n\005agree\030\001 \001(\010\022\021\n\tinvite_id\030\002 \001(\004\""
      "\'\n\022smsg_invite_remove\022\021\n\tinvite_id\030\001 \001(\004"
      "\")\n\031smsg_invite_remove_social\022\014\n\004guid\030\001 "
      "\001(\004\"$\n\017smsg_invite_all\022\021\n\tnext_time\030\001 \001("
      "\004\"j\n\036smsg_team_player_reward_change\022\014\n\004g"
      "uid\030\001 \001(\004\022\013\n\003num\030\002 \001(\005\022\r\n\005point\030\003 \001(\005\022\014\n"
      "\004rank\030\004 \001(\005\022\020\n\010chenghao\030\005 \001(\005\"%\n\025smsg_ch"
      "ange_team_stat\022\014\n\004stat\030\001 \001(\005\"\034\n\013cmsg_han"
      "hua\022\r\n\005index\030\001 \001(\005\",\n\013smsg_hanhua\022\017\n\007con"
      "tent\030\001 \001(\t\022\014\n\004guid\030\002 \001(\004\"4\n\022cmsg_change_"
      "hanhua\022\r\n\005index\030\001 \003(\005\022\017\n\007content\030\002 \003(\t\"\312"
      "\001\n\rsmsg_fight_ds\022\n\n\002id\030\001 \001(\004\022\016\n\006result\030\002"
      " \001(\005\022\014\n\004text\030\003 \001(\014\022\014\n\004name\030\004 \001(\t\022\017\n\007duan"
      "wei\030\005 \001(\005\022\n\n\002bf\030\006 \001(\005\022\023\n\013template_id\030\007 \001"
      "(\005\022\013\n\003vip\030\010 \001(\005\022\017\n\007achieve\030\t \001(\005\022\021\n\tguan"
      "ghuan\030\n \001(\005\022\r\n\005dress\030\013 \001(\005\022\017\n\007cd_time\030\014 "
      "\001(\004\"7\n\rsmsg_reset_ds\022\022\n\noldduanwei\030\001 \001(\005"
      "\022\022\n\nnewduanwei\030\002 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3148);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_team.proto", &protobuf_RegisterTypes);
  ::protobuf_role_2eeproto::AddDescriptors();
  ::protobuf_equip_2eeproto::AddDescriptors();
  ::protobuf_treasure_2eeproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_msg_5fteam_2eproto
namespace protocol {
namespace team {

// ===================================================================

void team_player::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int team_player::kGuidFieldNumber;
const int team_player::kNameFieldNumber;
const int team_player::kIdFieldNumber;
const int team_player::kBfFieldNumber;
const int team_player::kChenhaoFieldNumber;
const int team_player::kLevelFieldNumber;
const int team_player::kLeaderFieldNumber;
const int team_player::kPrepareFieldNumber;
const int team_player::kRewardNumFieldNumber;
const int team_player::kIsNpcFieldNumber;
const int team_player::kServeridFieldNumber;
const int team_player::kKillFieldNumber;
const int team_player::kVipFieldNumber;
const int team_player::kAchieveFieldNumber;
const int team_player::kGuanghuanFieldNumber;
const int team_player::kDressFieldNumber;
const int team_player::kInvitesFieldNumber;
const int team_player::kBindGuidFieldNumber;
const int team_player::kNalflagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

team_player::team_player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_team_player.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.team_player)
}
team_player::team_player(const team_player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      invites_(from.invites_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nalflag_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(nalflag_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.team_player)
}

void team_player::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nalflag_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(nalflag_));
}

team_player::~team_player() {
  // @@protoc_insertion_point(destructor:protocol.team.team_player)
  SharedDtor();
}

void team_player::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void team_player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* team_player::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const team_player& team_player::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_team_player.base);
  return *internal_default_instance();
}


void team_player::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.team_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  invites_.Clear();
  set_changed();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nalflag_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(nalflag_));
  _internal_metadata_.Clear();
}

bool team_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.team_player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.team_player.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 chenhao = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chenhao_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool leader = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prepare = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prepare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reward_num = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_npc = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_npc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 serverid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 kill = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vip = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 achieve = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 guanghuan = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guanghuan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dress = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 invites = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_invites())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 138u, input, this->mutable_invites())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bind_guid = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bind_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nalflag = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nalflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.team_player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.team_player)
  return false;
#undef DO_
}

void team_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.team_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.team_player.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // int32 bf = 4;
  if (this->bf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bf(), output);
  }

  // int32 chenhao = 5;
  if (this->chenhao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chenhao(), output);
  }

  // int32 level = 6;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // bool leader = 7;
  if (this->leader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->leader(), output);
  }

  // bool prepare = 8;
  if (this->prepare() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->prepare(), output);
  }

  // int32 reward_num = 9;
  if (this->reward_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reward_num(), output);
  }

  // bool is_npc = 10;
  if (this->is_npc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_npc(), output);
  }

  // int32 serverid = 11;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->serverid(), output);
  }

  // int32 kill = 12;
  if (this->kill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->kill(), output);
  }

  // int32 vip = 13;
  if (this->vip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vip(), output);
  }

  // int32 achieve = 14;
  if (this->achieve() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->achieve(), output);
  }

  // int32 guanghuan = 15;
  if (this->guanghuan() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->guanghuan(), output);
  }

  // int32 dress = 16;
  if (this->dress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->dress(), output);
  }

  // repeated uint64 invites = 17;
  if (this->invites_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(17, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _invites_cached_byte_size_));
  }
  for (int i = 0, n = this->invites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->invites(i), output);
  }

  // uint64 bind_guid = 18;
  if (this->bind_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->bind_guid(), output);
  }

  // int32 nalflag = 19;
  if (this->nalflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->nalflag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.team_player)
}

::google::protobuf::uint8* team_player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.team_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.team_player.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // int32 bf = 4;
  if (this->bf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bf(), target);
  }

  // int32 chenhao = 5;
  if (this->chenhao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chenhao(), target);
  }

  // int32 level = 6;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // bool leader = 7;
  if (this->leader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->leader(), target);
  }

  // bool prepare = 8;
  if (this->prepare() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->prepare(), target);
  }

  // int32 reward_num = 9;
  if (this->reward_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reward_num(), target);
  }

  // bool is_npc = 10;
  if (this->is_npc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_npc(), target);
  }

  // int32 serverid = 11;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->serverid(), target);
  }

  // int32 kill = 12;
  if (this->kill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->kill(), target);
  }

  // int32 vip = 13;
  if (this->vip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->vip(), target);
  }

  // int32 achieve = 14;
  if (this->achieve() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->achieve(), target);
  }

  // int32 guanghuan = 15;
  if (this->guanghuan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->guanghuan(), target);
  }

  // int32 dress = 16;
  if (this->dress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->dress(), target);
  }

  // repeated uint64 invites = 17;
  if (this->invites_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      17,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _invites_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->invites_, target);
  }

  // uint64 bind_guid = 18;
  if (this->bind_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->bind_guid(), target);
  }

  // int32 nalflag = 19;
  if (this->nalflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->nalflag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.team_player)
  return target;
}

size_t team_player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.team_player)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 invites = 17;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->invites_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _invites_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // int32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 bf = 4;
  if (this->bf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bf());
  }

  // int32 chenhao = 5;
  if (this->chenhao() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chenhao());
  }

  // int32 level = 6;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // bool leader = 7;
  if (this->leader() != 0) {
    total_size += 1 + 1;
  }

  // bool prepare = 8;
  if (this->prepare() != 0) {
    total_size += 1 + 1;
  }

  // bool is_npc = 10;
  if (this->is_npc() != 0) {
    total_size += 1 + 1;
  }

  // int32 reward_num = 9;
  if (this->reward_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reward_num());
  }

  // int32 serverid = 11;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());
  }

  // int32 kill = 12;
  if (this->kill() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kill());
  }

  // int32 vip = 13;
  if (this->vip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vip());
  }

  // int32 achieve = 14;
  if (this->achieve() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->achieve());
  }

  // int32 guanghuan = 15;
  if (this->guanghuan() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guanghuan());
  }

  // int32 dress = 16;
  if (this->dress() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dress());
  }

  // uint64 bind_guid = 18;
  if (this->bind_guid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bind_guid());
  }

  // int32 nalflag = 19;
  if (this->nalflag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nalflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void team_player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.team_player)
  GOOGLE_DCHECK_NE(&from, this);
  const team_player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const team_player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.team_player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.team_player)
    MergeFrom(*source);
  }
}

void team_player::MergeFrom(const team_player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.team_player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invites_.MergeFrom(from.invites_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.bf() != 0) {
    set_bf(from.bf());
  }
  if (from.chenhao() != 0) {
    set_chenhao(from.chenhao());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.leader() != 0) {
    set_leader(from.leader());
  }
  if (from.prepare() != 0) {
    set_prepare(from.prepare());
  }
  if (from.is_npc() != 0) {
    set_is_npc(from.is_npc());
  }
  if (from.reward_num() != 0) {
    set_reward_num(from.reward_num());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.kill() != 0) {
    set_kill(from.kill());
  }
  if (from.vip() != 0) {
    set_vip(from.vip());
  }
  if (from.achieve() != 0) {
    set_achieve(from.achieve());
  }
  if (from.guanghuan() != 0) {
    set_guanghuan(from.guanghuan());
  }
  if (from.dress() != 0) {
    set_dress(from.dress());
  }
  if (from.bind_guid() != 0) {
    set_bind_guid(from.bind_guid());
  }
  if (from.nalflag() != 0) {
    set_nalflag(from.nalflag());
  }
}

void team_player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.team_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_player::CopyFrom(const team_player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.team_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_player::IsInitialized() const {
  return true;
}

void team_player::Swap(team_player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void team_player::InternalSwap(team_player* other) {
  using std::swap;
  invites_.InternalSwap(&other->invites_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guid_, other->guid_);
  swap(id_, other->id_);
  swap(bf_, other->bf_);
  swap(chenhao_, other->chenhao_);
  swap(level_, other->level_);
  swap(leader_, other->leader_);
  swap(prepare_, other->prepare_);
  swap(is_npc_, other->is_npc_);
  swap(reward_num_, other->reward_num_);
  swap(serverid_, other->serverid_);
  swap(kill_, other->kill_);
  swap(vip_, other->vip_);
  swap(achieve_, other->achieve_);
  swap(guanghuan_, other->guanghuan_);
  swap(dress_, other->dress_);
  swap(bind_guid_, other->bind_guid_);
  swap(nalflag_, other->nalflag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata team_player::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void team::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int team::kTeamIdFieldNumber;
const int team::kPlayersFieldNumber;
const int team::kOpenFieldNumber;
const int team::kLevelFieldNumber;
const int team::kJiachengFieldNumber;
const int team::kResultFieldNumber;
const int team::kStatFieldNumber;
const int team::kFightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

team::team()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_team.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.team)
}
team::team(const team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(stat_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.team)
}

void team::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stat_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(stat_));
}

team::~team() {
  // @@protoc_insertion_point(destructor:protocol.team.team)
  SharedDtor();
}

void team::SharedDtor() {
}

void team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* team::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const team& team::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_team.base);
  return *internal_default_instance();
}


void team::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stat_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(stat_));
  _internal_metadata_.Clear();
}

bool team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.team)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.team.team_player players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool open = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 jiacheng = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jiacheng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fight = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.team)
  return false;
#undef DO_
}

void team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->team_id(), output);
  }

  // repeated .protocol.team.team_player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->players(static_cast<int>(i)),
      output);
  }

  // bool open = 3;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->open(), output);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // int32 jiacheng = 5;
  if (this->jiacheng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->jiacheng(), output);
  }

  // bool result = 6;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->result(), output);
  }

  // int32 stat = 7;
  if (this->stat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stat(), output);
  }

  // bool fight = 8;
  if (this->fight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.team)
}

::google::protobuf::uint8* team::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->team_id(), target);
  }

  // repeated .protocol.team.team_player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->players(static_cast<int>(i)), deterministic, target);
  }

  // bool open = 3;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->open(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // int32 jiacheng = 5;
  if (this->jiacheng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->jiacheng(), target);
  }

  // bool result = 6;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->result(), target);
  }

  // int32 stat = 7;
  if (this->stat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->stat(), target);
  }

  // bool fight = 8;
  if (this->fight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.team)
  return target;
}

size_t team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.team)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .protocol.team.team_player players = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->team_id());
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 jiacheng = 5;
  if (this->jiacheng() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->jiacheng());
  }

  // bool open = 3;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  // bool result = 6;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // bool fight = 8;
  if (this->fight() != 0) {
    total_size += 1 + 1;
  }

  // int32 stat = 7;
  if (this->stat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.team)
  GOOGLE_DCHECK_NE(&from, this);
  const team* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const team>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.team)
    MergeFrom(*source);
  }
}

void team::MergeFrom(const team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.team_id() != 0) {
    set_team_id(from.team_id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.jiacheng() != 0) {
    set_jiacheng(from.jiacheng());
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.fight() != 0) {
    set_fight(from.fight());
  }
  if (from.stat() != 0) {
    set_stat(from.stat());
  }
}

void team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team::CopyFrom(const team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team::IsInitialized() const {
  return true;
}

void team::Swap(team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void team::InternalSwap(team* other) {
  using std::swap;
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  swap(team_id_, other->team_id_);
  swap(level_, other->level_);
  swap(jiacheng_, other->jiacheng_);
  swap(open_, other->open_);
  swap(result_, other->result_);
  swap(fight_, other->fight_);
  swap(stat_, other->stat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata team::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void team_invite::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int team_invite::kInviteIdFieldNumber;
const int team_invite::kGuidFieldNumber;
const int team_invite::kNameFieldNumber;
const int team_invite::kIdFieldNumber;
const int team_invite::kChenghaoFieldNumber;
const int team_invite::kBfFieldNumber;
const int team_invite::kGuildFieldNumber;
const int team_invite::kLevelFieldNumber;
const int team_invite::kVipFieldNumber;
const int team_invite::kAchieveFieldNumber;
const int team_invite::kTeamIdFieldNumber;
const int team_invite::kTimeFieldNumber;
const int team_invite::kNalflagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

team_invite::team_invite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_team_invite.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.team_invite)
}
team_invite::team_invite(const team_invite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  guild_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.guild().size() > 0) {
    guild_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_);
  }
  ::memcpy(&invite_id_, &from.invite_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&nalflag_) -
    reinterpret_cast<char*>(&invite_id_)) + sizeof(nalflag_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.team_invite)
}

void team_invite::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&invite_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nalflag_) -
      reinterpret_cast<char*>(&invite_id_)) + sizeof(nalflag_));
}

team_invite::~team_invite() {
  // @@protoc_insertion_point(destructor:protocol.team.team_invite)
  SharedDtor();
}

void team_invite::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void team_invite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* team_invite::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const team_invite& team_invite::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_team_invite.base);
  return *internal_default_instance();
}


void team_invite::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.team_invite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  set_changed();
  guild_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&invite_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nalflag_) -
      reinterpret_cast<char*>(&invite_id_)) + sizeof(nalflag_));
  _internal_metadata_.Clear();
}

bool team_invite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.team_invite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 invite_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.team_invite.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 chenghao = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chenghao_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string guild = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guild().data(), static_cast<int>(this->guild().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.team_invite.guild"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vip = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 achieve = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 team_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nalflag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nalflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.team_invite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.team_invite)
  return false;
#undef DO_
}

void team_invite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.team_invite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 invite_id = 1;
  if (this->invite_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invite_id(), output);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.team_invite.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // int32 id = 4;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  // int32 chenghao = 5;
  if (this->chenghao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chenghao(), output);
  }

  // int32 bf = 6;
  if (this->bf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bf(), output);
  }

  // string guild = 7;
  if (this->guild().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild().data(), static_cast<int>(this->guild().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.team_invite.guild");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->guild(), output);
  }

  // int32 level = 8;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }

  // int32 vip = 9;
  if (this->vip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vip(), output);
  }

  // int32 achieve = 10;
  if (this->achieve() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->achieve(), output);
  }

  // uint64 team_id = 11;
  if (this->team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->team_id(), output);
  }

  // int32 time = 12;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->time(), output);
  }

  // int32 nalflag = 13;
  if (this->nalflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->nalflag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.team_invite)
}

::google::protobuf::uint8* team_invite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.team_invite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 invite_id = 1;
  if (this->invite_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invite_id(), target);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.team_invite.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // int32 id = 4;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  // int32 chenghao = 5;
  if (this->chenghao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chenghao(), target);
  }

  // int32 bf = 6;
  if (this->bf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bf(), target);
  }

  // string guild = 7;
  if (this->guild().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild().data(), static_cast<int>(this->guild().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.team_invite.guild");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->guild(), target);
  }

  // int32 level = 8;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }

  // int32 vip = 9;
  if (this->vip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->vip(), target);
  }

  // int32 achieve = 10;
  if (this->achieve() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->achieve(), target);
  }

  // uint64 team_id = 11;
  if (this->team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->team_id(), target);
  }

  // int32 time = 12;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->time(), target);
  }

  // int32 nalflag = 13;
  if (this->nalflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->nalflag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.team_invite)
  return target;
}

size_t team_invite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.team_invite)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string guild = 7;
  if (this->guild().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild());
  }

  // uint64 invite_id = 1;
  if (this->invite_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->invite_id());
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // int32 id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 chenghao = 5;
  if (this->chenghao() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chenghao());
  }

  // int32 bf = 6;
  if (this->bf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bf());
  }

  // int32 level = 8;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 vip = 9;
  if (this->vip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vip());
  }

  // int32 achieve = 10;
  if (this->achieve() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->achieve());
  }

  // uint64 team_id = 11;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->team_id());
  }

  // int32 time = 12;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // int32 nalflag = 13;
  if (this->nalflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nalflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void team_invite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.team_invite)
  GOOGLE_DCHECK_NE(&from, this);
  const team_invite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const team_invite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.team_invite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.team_invite)
    MergeFrom(*source);
  }
}

void team_invite::MergeFrom(const team_invite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.team_invite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.guild().size() > 0) {

    guild_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_);
  }
  if (from.invite_id() != 0) {
    set_invite_id(from.invite_id());
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.chenghao() != 0) {
    set_chenghao(from.chenghao());
  }
  if (from.bf() != 0) {
    set_bf(from.bf());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.vip() != 0) {
    set_vip(from.vip());
  }
  if (from.achieve() != 0) {
    set_achieve(from.achieve());
  }
  if (from.team_id() != 0) {
    set_team_id(from.team_id());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.nalflag() != 0) {
    set_nalflag(from.nalflag());
  }
}

void team_invite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.team_invite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_invite::CopyFrom(const team_invite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.team_invite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_invite::IsInitialized() const {
  return true;
}

void team_invite::Swap(team_invite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void team_invite::InternalSwap(team_invite* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guild_.Swap(&other->guild_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(invite_id_, other->invite_id_);
  swap(guid_, other->guid_);
  swap(id_, other->id_);
  swap(chenghao_, other->chenghao_);
  swap(bf_, other->bf_);
  swap(level_, other->level_);
  swap(vip_, other->vip_);
  swap(achieve_, other->achieve_);
  swap(team_id_, other->team_id_);
  swap(time_, other->time_);
  swap(nalflag_, other->nalflag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata team_invite::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bingyuan_huihe::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bingyuan_huihe::kTeamIdsFieldNumber;
const int bingyuan_huihe::kTeamGuidsFieldNumber;
const int bingyuan_huihe::kMaxHpsFieldNumber;
const int bingyuan_huihe::kHpsFieldNumber;
const int bingyuan_huihe::kWinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bingyuan_huihe::bingyuan_huihe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_bingyuan_huihe.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.bingyuan_huihe)
}
bingyuan_huihe::bingyuan_huihe(const bingyuan_huihe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      team_ids_(from.team_ids_),
      team_guids_(from.team_guids_),
      max_hps_(from.max_hps_),
      hps_(from.hps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  win_ = from.win_;
  // @@protoc_insertion_point(copy_constructor:protocol.team.bingyuan_huihe)
}

void bingyuan_huihe::SharedCtor() {
  win_ = GOOGLE_ULONGLONG(0);
}

bingyuan_huihe::~bingyuan_huihe() {
  // @@protoc_insertion_point(destructor:protocol.team.bingyuan_huihe)
  SharedDtor();
}

void bingyuan_huihe::SharedDtor() {
}

void bingyuan_huihe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* bingyuan_huihe::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bingyuan_huihe& bingyuan_huihe::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_bingyuan_huihe.base);
  return *internal_default_instance();
}


void bingyuan_huihe::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.bingyuan_huihe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  team_ids_.Clear();
  set_changed();
  team_guids_.Clear();
  set_changed();
  max_hps_.Clear();
  set_changed();
  hps_.Clear();
  set_changed();
  win_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool bingyuan_huihe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.bingyuan_huihe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 team_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_team_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_team_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 team_guids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_team_guids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_team_guids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double max_hps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_max_hps())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_max_hps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double hps = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_hps())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_hps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 win = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.bingyuan_huihe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.bingyuan_huihe)
  return false;
#undef DO_
}

void bingyuan_huihe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.bingyuan_huihe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 team_ids = 1;
  if (this->team_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _team_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->team_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->team_ids(i), output);
  }

  // repeated uint64 team_guids = 2;
  if (this->team_guids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _team_guids_cached_byte_size_));
  }
  for (int i = 0, n = this->team_guids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->team_guids(i), output);
  }

  // repeated double max_hps = 3;
  if (this->max_hps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _max_hps_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->max_hps().data(), this->max_hps_size(), output);
  }

  // repeated double hps = 4;
  if (this->hps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _hps_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->hps().data(), this->hps_size(), output);
  }

  // uint64 win = 5;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->win(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.bingyuan_huihe)
}

::google::protobuf::uint8* bingyuan_huihe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.bingyuan_huihe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 team_ids = 1;
  if (this->team_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _team_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->team_ids_, target);
  }

  // repeated uint64 team_guids = 2;
  if (this->team_guids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _team_guids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->team_guids_, target);
  }

  // repeated double max_hps = 3;
  if (this->max_hps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _max_hps_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->max_hps_, target);
  }

  // repeated double hps = 4;
  if (this->hps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _hps_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->hps_, target);
  }

  // uint64 win = 5;
  if (this->win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->win(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.bingyuan_huihe)
  return target;
}

size_t bingyuan_huihe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.bingyuan_huihe)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 team_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->team_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _team_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 team_guids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->team_guids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _team_guids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double max_hps = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->max_hps_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _max_hps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double hps = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->hps_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 win = 5;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->win());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bingyuan_huihe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.bingyuan_huihe)
  GOOGLE_DCHECK_NE(&from, this);
  const bingyuan_huihe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bingyuan_huihe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.bingyuan_huihe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.bingyuan_huihe)
    MergeFrom(*source);
  }
}

void bingyuan_huihe::MergeFrom(const bingyuan_huihe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.bingyuan_huihe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_ids_.MergeFrom(from.team_ids_);
  team_guids_.MergeFrom(from.team_guids_);
  max_hps_.MergeFrom(from.max_hps_);
  hps_.MergeFrom(from.hps_);
  if (from.win() != 0) {
    set_win(from.win());
  }
}

void bingyuan_huihe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.bingyuan_huihe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bingyuan_huihe::CopyFrom(const bingyuan_huihe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.bingyuan_huihe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bingyuan_huihe::IsInitialized() const {
  return true;
}

void bingyuan_huihe::Swap(bingyuan_huihe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bingyuan_huihe::InternalSwap(bingyuan_huihe* other) {
  using std::swap;
  team_ids_.InternalSwap(&other->team_ids_);
  team_guids_.InternalSwap(&other->team_guids_);
  max_hps_.InternalSwap(&other->max_hps_);
  hps_.InternalSwap(&other->hps_);
  swap(win_, other->win_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata bingyuan_huihe::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bingyuan_fight_text::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bingyuan_fight_text::kHuihesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bingyuan_fight_text::bingyuan_fight_text()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_bingyuan_fight_text.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.bingyuan_fight_text)
}
bingyuan_fight_text::bingyuan_fight_text(const bingyuan_fight_text& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      huihes_(from.huihes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.team.bingyuan_fight_text)
}

void bingyuan_fight_text::SharedCtor() {
}

bingyuan_fight_text::~bingyuan_fight_text() {
  // @@protoc_insertion_point(destructor:protocol.team.bingyuan_fight_text)
  SharedDtor();
}

void bingyuan_fight_text::SharedDtor() {
}

void bingyuan_fight_text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* bingyuan_fight_text::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bingyuan_fight_text& bingyuan_fight_text::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_bingyuan_fight_text.base);
  return *internal_default_instance();
}


void bingyuan_fight_text::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.bingyuan_fight_text)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  huihes_.Clear();
  _internal_metadata_.Clear();
}

bool bingyuan_fight_text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.bingyuan_fight_text)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.team.bingyuan_huihe huihes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_huihes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.bingyuan_fight_text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.bingyuan_fight_text)
  return false;
#undef DO_
}

void bingyuan_fight_text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.bingyuan_fight_text)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.team.bingyuan_huihe huihes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->huihes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->huihes(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.bingyuan_fight_text)
}

::google::protobuf::uint8* bingyuan_fight_text::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.bingyuan_fight_text)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.team.bingyuan_huihe huihes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->huihes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->huihes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.bingyuan_fight_text)
  return target;
}

size_t bingyuan_fight_text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.bingyuan_fight_text)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .protocol.team.bingyuan_huihe huihes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->huihes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->huihes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bingyuan_fight_text::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.bingyuan_fight_text)
  GOOGLE_DCHECK_NE(&from, this);
  const bingyuan_fight_text* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bingyuan_fight_text>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.bingyuan_fight_text)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.bingyuan_fight_text)
    MergeFrom(*source);
  }
}

void bingyuan_fight_text::MergeFrom(const bingyuan_fight_text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.bingyuan_fight_text)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  huihes_.MergeFrom(from.huihes_);
}

void bingyuan_fight_text::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.bingyuan_fight_text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bingyuan_fight_text::CopyFrom(const bingyuan_fight_text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.bingyuan_fight_text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bingyuan_fight_text::IsInitialized() const {
  return true;
}

void bingyuan_fight_text::Swap(bingyuan_fight_text* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bingyuan_fight_text::InternalSwap(bingyuan_fight_text* other) {
  using std::swap;
  CastToBase(&huihes_)->InternalSwap(CastToBase(&other->huihes_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata bingyuan_fight_text::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_enter_world::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_enter_world::kGuidFieldNumber;
const int cmsg_enter_world::kSigFieldNumber;
const int cmsg_enter_world::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_enter_world::cmsg_enter_world()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_cmsg_enter_world.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.cmsg_enter_world)
}
cmsg_enter_world::cmsg_enter_world(const cmsg_enter_world& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sig().size() > 0) {
    sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.cmsg_enter_world)
}

void cmsg_enter_world::SharedCtor() {
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(type_));
}

cmsg_enter_world::~cmsg_enter_world() {
  // @@protoc_insertion_point(destructor:protocol.team.cmsg_enter_world)
  SharedDtor();
}

void cmsg_enter_world::SharedDtor() {
  sig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void cmsg_enter_world::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_enter_world::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_enter_world& cmsg_enter_world::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_cmsg_enter_world.base);
  return *internal_default_instance();
}


void cmsg_enter_world::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.cmsg_enter_world)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool cmsg_enter_world::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.cmsg_enter_world)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sig = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sig().data(), static_cast<int>(this->sig().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.cmsg_enter_world.sig"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.cmsg_enter_world)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.cmsg_enter_world)
  return false;
#undef DO_
}

void cmsg_enter_world::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.cmsg_enter_world)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // string sig = 2;
  if (this->sig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sig().data(), static_cast<int>(this->sig().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.cmsg_enter_world.sig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sig(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.cmsg_enter_world)
}

::google::protobuf::uint8* cmsg_enter_world::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.cmsg_enter_world)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // string sig = 2;
  if (this->sig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sig().data(), static_cast<int>(this->sig().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.cmsg_enter_world.sig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sig(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.cmsg_enter_world)
  return target;
}

size_t cmsg_enter_world::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.cmsg_enter_world)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sig = 2;
  if (this->sig().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sig());
  }

  // uint64 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_enter_world::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.cmsg_enter_world)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_enter_world* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_enter_world>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.cmsg_enter_world)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.cmsg_enter_world)
    MergeFrom(*source);
  }
}

void cmsg_enter_world::MergeFrom(const cmsg_enter_world& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.cmsg_enter_world)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sig().size() > 0) {

    sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void cmsg_enter_world::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.cmsg_enter_world)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_enter_world::CopyFrom(const cmsg_enter_world& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.cmsg_enter_world)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_enter_world::IsInitialized() const {
  return true;
}

void cmsg_enter_world::Swap(cmsg_enter_world* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_enter_world::InternalSwap(cmsg_enter_world* other) {
  using std::swap;
  sig_.Swap(&other->sig_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guid_, other->guid_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_enter_world::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_enter_world::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_enter_world::kChenghaoFieldNumber;
const int smsg_enter_world::kPointFieldNumber;
const int smsg_enter_world::kRankFieldNumber;
const int smsg_enter_world::kNextInviteTimeFieldNumber;
const int smsg_enter_world::kInvitesFieldNumber;
const int smsg_enter_world::kTalksFieldNumber;
const int smsg_enter_world::kSrankFieldNumber;
const int smsg_enter_world::kSgrankFieldNumber;
const int smsg_enter_world::kSpointFieldNumber;
const int smsg_enter_world::kSduanweiFieldNumber;
const int smsg_enter_world::kSresetFieldNumber;
const int smsg_enter_world::kSoduanweiFieldNumber;
const int smsg_enter_world::kDsCdtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_enter_world::smsg_enter_world()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_enter_world.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_enter_world)
}
smsg_enter_world::smsg_enter_world(const smsg_enter_world& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      invites_(from.invites_),
      talks_(from.talks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chenghao_, &from.chenghao_,
    static_cast<size_t>(reinterpret_cast<char*>(&soduanwei_) -
    reinterpret_cast<char*>(&chenghao_)) + sizeof(soduanwei_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_enter_world)
}

void smsg_enter_world::SharedCtor() {
  ::memset(&chenghao_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soduanwei_) -
      reinterpret_cast<char*>(&chenghao_)) + sizeof(soduanwei_));
}

smsg_enter_world::~smsg_enter_world() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_enter_world)
  SharedDtor();
}

void smsg_enter_world::SharedDtor() {
}

void smsg_enter_world::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_enter_world::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_enter_world& smsg_enter_world::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_enter_world.base);
  return *internal_default_instance();
}


void smsg_enter_world::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_enter_world)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invites_.Clear();
  set_changed();
  talks_.Clear();
  ::memset(&chenghao_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soduanwei_) -
      reinterpret_cast<char*>(&chenghao_)) + sizeof(soduanwei_));
  _internal_metadata_.Clear();
}

bool smsg_enter_world::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_enter_world)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 chenghao = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chenghao_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rank = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 next_invite_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_invite_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.team.team_invite invites = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_invites()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string talks = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_talks()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->talks(this->talks_size() - 1).data(),
            static_cast<int>(this->talks(this->talks_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.smsg_enter_world.talks"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 srank = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sgrank = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sgrank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 spoint = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sduanwei = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sduanwei_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sreset = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sreset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 soduanwei = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soduanwei_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ds_cdtime = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ds_cdtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_enter_world)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_enter_world)
  return false;
#undef DO_
}

void smsg_enter_world::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_enter_world)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chenghao = 1;
  if (this->chenghao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chenghao(), output);
  }

  // int32 point = 2;
  if (this->point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }

  // int32 rank = 3;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // uint64 next_invite_time = 4;
  if (this->next_invite_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->next_invite_time(), output);
  }

  // repeated .protocol.team.team_invite invites = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->invites_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->invites(static_cast<int>(i)),
      output);
  }

  // repeated string talks = 6;
  for (int i = 0, n = this->talks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->talks(i).data(), static_cast<int>(this->talks(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_enter_world.talks");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->talks(i), output);
  }

  // int32 srank = 7;
  if (this->srank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->srank(), output);
  }

  // int32 sgrank = 8;
  if (this->sgrank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sgrank(), output);
  }

  // int32 spoint = 9;
  if (this->spoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->spoint(), output);
  }

  // int32 sduanwei = 10;
  if (this->sduanwei() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sduanwei(), output);
  }

  // bool sreset = 11;
  if (this->sreset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->sreset(), output);
  }

  // int32 soduanwei = 12;
  if (this->soduanwei() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->soduanwei(), output);
  }

  // uint64 ds_cdtime = 13;
  if (this->ds_cdtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->ds_cdtime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_enter_world)
}

::google::protobuf::uint8* smsg_enter_world::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_enter_world)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chenghao = 1;
  if (this->chenghao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chenghao(), target);
  }

  // int32 point = 2;
  if (this->point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }

  // int32 rank = 3;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // uint64 next_invite_time = 4;
  if (this->next_invite_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->next_invite_time(), target);
  }

  // repeated .protocol.team.team_invite invites = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->invites_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->invites(static_cast<int>(i)), deterministic, target);
  }

  // repeated string talks = 6;
  for (int i = 0, n = this->talks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->talks(i).data(), static_cast<int>(this->talks(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_enter_world.talks");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->talks(i), target);
  }

  // int32 srank = 7;
  if (this->srank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->srank(), target);
  }

  // int32 sgrank = 8;
  if (this->sgrank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sgrank(), target);
  }

  // int32 spoint = 9;
  if (this->spoint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->spoint(), target);
  }

  // int32 sduanwei = 10;
  if (this->sduanwei() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sduanwei(), target);
  }

  // bool sreset = 11;
  if (this->sreset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->sreset(), target);
  }

  // int32 soduanwei = 12;
  if (this->soduanwei() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->soduanwei(), target);
  }

  // uint64 ds_cdtime = 13;
  if (this->ds_cdtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->ds_cdtime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_enter_world)
  return target;
}

size_t smsg_enter_world::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_enter_world)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .protocol.team.team_invite invites = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->invites_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->invites(static_cast<int>(i)));
    }
  }

  // repeated string talks = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->talks_size());
  for (int i = 0, n = this->talks_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->talks(i));
  }

  // int32 chenghao = 1;
  if (this->chenghao() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chenghao());
  }

  // int32 point = 2;
  if (this->point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->point());
  }

  // uint64 next_invite_time = 4;
  if (this->next_invite_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->next_invite_time());
  }

  // int32 rank = 3;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  // int32 srank = 7;
  if (this->srank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srank());
  }

  // int32 sgrank = 8;
  if (this->sgrank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sgrank());
  }

  // int32 spoint = 9;
  if (this->spoint() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->spoint());
  }

  // int32 sduanwei = 10;
  if (this->sduanwei() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sduanwei());
  }

  // bool sreset = 11;
  if (this->sreset() != 0) {
    total_size += 1 + 1;
  }

  // uint64 ds_cdtime = 13;
  if (this->ds_cdtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ds_cdtime());
  }

  // int32 soduanwei = 12;
  if (this->soduanwei() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->soduanwei());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_enter_world::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_enter_world)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_enter_world* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_enter_world>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_enter_world)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_enter_world)
    MergeFrom(*source);
  }
}

void smsg_enter_world::MergeFrom(const smsg_enter_world& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_enter_world)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invites_.MergeFrom(from.invites_);
  talks_.MergeFrom(from.talks_);
  if (from.chenghao() != 0) {
    set_chenghao(from.chenghao());
  }
  if (from.point() != 0) {
    set_point(from.point());
  }
  if (from.next_invite_time() != 0) {
    set_next_invite_time(from.next_invite_time());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.srank() != 0) {
    set_srank(from.srank());
  }
  if (from.sgrank() != 0) {
    set_sgrank(from.sgrank());
  }
  if (from.spoint() != 0) {
    set_spoint(from.spoint());
  }
  if (from.sduanwei() != 0) {
    set_sduanwei(from.sduanwei());
  }
  if (from.sreset() != 0) {
    set_sreset(from.sreset());
  }
  if (from.ds_cdtime() != 0) {
    set_ds_cdtime(from.ds_cdtime());
  }
  if (from.soduanwei() != 0) {
    set_soduanwei(from.soduanwei());
  }
}

void smsg_enter_world::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_enter_world)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_enter_world::CopyFrom(const smsg_enter_world& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_enter_world)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_enter_world::IsInitialized() const {
  return true;
}

void smsg_enter_world::Swap(smsg_enter_world* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_enter_world::InternalSwap(smsg_enter_world* other) {
  using std::swap;
  CastToBase(&invites_)->InternalSwap(CastToBase(&other->invites_));
  talks_.InternalSwap(CastToBase(&other->talks_));
  swap(chenghao_, other->chenghao_);
  swap(point_, other->point_);
  swap(next_invite_time_, other->next_invite_time_);
  swap(rank_, other->rank_);
  swap(srank_, other->srank_);
  swap(sgrank_, other->sgrank_);
  swap(spoint_, other->spoint_);
  swap(sduanwei_, other->sduanwei_);
  swap(sreset_, other->sreset_);
  swap(ds_cdtime_, other->ds_cdtime_);
  swap(soduanwei_, other->soduanwei_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_enter_world::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_team_create::InitAsDefaultInstance() {
  ::protocol::team::_smsg_team_create_default_instance_._instance.get_mutable()->team_info_ = const_cast< ::protocol::team::team*>(
      ::protocol::team::team::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_team_create::kTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_team_create::smsg_team_create()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_team_create.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_team_create)
}
smsg_team_create::smsg_team_create(const smsg_team_create& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_info()) {
    team_info_ = new ::protocol::team::team(*from.team_info_);
  } else {
    team_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_team_create)
}

void smsg_team_create::SharedCtor() {
  team_info_ = NULL;
}

smsg_team_create::~smsg_team_create() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_team_create)
  SharedDtor();
}

void smsg_team_create::SharedDtor() {
  if (this != internal_default_instance()) delete team_info_;
}

void smsg_team_create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_team_create::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_team_create& smsg_team_create::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_team_create.base);
  return *internal_default_instance();
}


void smsg_team_create::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_team_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && team_info_ != NULL) {
    delete team_info_;
  }
  team_info_ = NULL;
  _internal_metadata_.Clear();
}

bool smsg_team_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_team_create)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.team.team team_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_team_create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_team_create)
  return false;
#undef DO_
}

void smsg_team_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_team_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.team.team team_info = 1;
  if (this->has_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_team_create)
}

::google::protobuf::uint8* smsg_team_create::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_team_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.team.team team_info = 1;
  if (this->has_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_info(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_team_create)
  return target;
}

size_t smsg_team_create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_team_create)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .protocol.team.team team_info = 1;
  if (this->has_team_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_team_create::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_team_create)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_team_create* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_team_create>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_team_create)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_team_create)
    MergeFrom(*source);
  }
}

void smsg_team_create::MergeFrom(const smsg_team_create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_team_create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_info()) {
    mutable_team_info()->::protocol::team::team::MergeFrom(from.team_info());
  }
}

void smsg_team_create::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_team_create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_team_create::CopyFrom(const smsg_team_create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_team_create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_team_create::IsInitialized() const {
  return true;
}

void smsg_team_create::Swap(smsg_team_create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_team_create::InternalSwap(smsg_team_create* other) {
  using std::swap;
  swap(team_info_, other->team_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_team_create::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_team_enter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_team_enter::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_team_enter::cmsg_team_enter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_cmsg_team_enter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.cmsg_team_enter)
}
cmsg_team_enter::cmsg_team_enter(const cmsg_team_enter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.team.cmsg_team_enter)
}

void cmsg_team_enter::SharedCtor() {
  team_id_ = GOOGLE_ULONGLONG(0);
}

cmsg_team_enter::~cmsg_team_enter() {
  // @@protoc_insertion_point(destructor:protocol.team.cmsg_team_enter)
  SharedDtor();
}

void cmsg_team_enter::SharedDtor() {
}

void cmsg_team_enter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_team_enter::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_team_enter& cmsg_team_enter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_cmsg_team_enter.base);
  return *internal_default_instance();
}


void cmsg_team_enter::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.cmsg_team_enter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  team_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool cmsg_team_enter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.cmsg_team_enter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.cmsg_team_enter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.cmsg_team_enter)
  return false;
#undef DO_
}

void cmsg_team_enter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.cmsg_team_enter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->team_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.cmsg_team_enter)
}

::google::protobuf::uint8* cmsg_team_enter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.cmsg_team_enter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->team_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.cmsg_team_enter)
  return target;
}

size_t cmsg_team_enter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.cmsg_team_enter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 team_id = 1;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_team_enter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.cmsg_team_enter)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_team_enter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_team_enter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.cmsg_team_enter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.cmsg_team_enter)
    MergeFrom(*source);
  }
}

void cmsg_team_enter::MergeFrom(const cmsg_team_enter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.cmsg_team_enter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_id() != 0) {
    set_team_id(from.team_id());
  }
}

void cmsg_team_enter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.cmsg_team_enter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_team_enter::CopyFrom(const cmsg_team_enter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.cmsg_team_enter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_team_enter::IsInitialized() const {
  return true;
}

void cmsg_team_enter::Swap(cmsg_team_enter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_team_enter::InternalSwap(cmsg_team_enter* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_team_enter::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_team_enter::InitAsDefaultInstance() {
  ::protocol::team::_smsg_team_enter_default_instance_._instance.get_mutable()->member_ = const_cast< ::protocol::team::team_player*>(
      ::protocol::team::team_player::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_team_enter::kMemberFieldNumber;
const int smsg_team_enter::kLevelFieldNumber;
const int smsg_team_enter::kJiachengFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_team_enter::smsg_team_enter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_team_enter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_team_enter)
}
smsg_team_enter::smsg_team_enter(const smsg_team_enter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_member()) {
    member_ = new ::protocol::team::team_player(*from.member_);
  } else {
    member_ = NULL;
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&jiacheng_) -
    reinterpret_cast<char*>(&level_)) + sizeof(jiacheng_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_team_enter)
}

void smsg_team_enter::SharedCtor() {
  ::memset(&member_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jiacheng_) -
      reinterpret_cast<char*>(&member_)) + sizeof(jiacheng_));
}

smsg_team_enter::~smsg_team_enter() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_team_enter)
  SharedDtor();
}

void smsg_team_enter::SharedDtor() {
  if (this != internal_default_instance()) delete member_;
}

void smsg_team_enter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_team_enter::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_team_enter& smsg_team_enter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_team_enter.base);
  return *internal_default_instance();
}


void smsg_team_enter::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_team_enter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && member_ != NULL) {
    delete member_;
  }
  member_ = NULL;
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jiacheng_) -
      reinterpret_cast<char*>(&level_)) + sizeof(jiacheng_));
  _internal_metadata_.Clear();
}

bool smsg_team_enter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_team_enter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.team.team_player member = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 jiacheng = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jiacheng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_team_enter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_team_enter)
  return false;
#undef DO_
}

void smsg_team_enter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_team_enter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.team.team_player member = 1;
  if (this->has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_member(), output);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // int32 jiacheng = 3;
  if (this->jiacheng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jiacheng(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_team_enter)
}

::google::protobuf::uint8* smsg_team_enter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_team_enter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.team.team_player member = 1;
  if (this->has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_member(), deterministic, target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // int32 jiacheng = 3;
  if (this->jiacheng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jiacheng(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_team_enter)
  return target;
}

size_t smsg_team_enter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_team_enter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .protocol.team.team_player member = 1;
  if (this->has_member()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *member_);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 jiacheng = 3;
  if (this->jiacheng() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->jiacheng());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_team_enter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_team_enter)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_team_enter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_team_enter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_team_enter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_team_enter)
    MergeFrom(*source);
  }
}

void smsg_team_enter::MergeFrom(const smsg_team_enter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_team_enter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_member()) {
    mutable_member()->::protocol::team::team_player::MergeFrom(from.member());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.jiacheng() != 0) {
    set_jiacheng(from.jiacheng());
  }
}

void smsg_team_enter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_team_enter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_team_enter::CopyFrom(const smsg_team_enter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_team_enter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_team_enter::IsInitialized() const {
  return true;
}

void smsg_team_enter::Swap(smsg_team_enter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_team_enter::InternalSwap(smsg_team_enter* other) {
  using std::swap;
  swap(member_, other->member_);
  swap(level_, other->level_);
  swap(jiacheng_, other->jiacheng_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_team_enter::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_team_leave::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_team_leave::kGuidFieldNumber;
const int smsg_team_leave::kLeaderFieldNumber;
const int smsg_team_leave::kLevelFieldNumber;
const int smsg_team_leave::kJiachengFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_team_leave::smsg_team_leave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_team_leave.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_team_leave)
}
smsg_team_leave::smsg_team_leave(const smsg_team_leave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&jiacheng_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(jiacheng_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_team_leave)
}

void smsg_team_leave::SharedCtor() {
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jiacheng_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(jiacheng_));
}

smsg_team_leave::~smsg_team_leave() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_team_leave)
  SharedDtor();
}

void smsg_team_leave::SharedDtor() {
}

void smsg_team_leave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_team_leave::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_team_leave& smsg_team_leave::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_team_leave.base);
  return *internal_default_instance();
}


void smsg_team_leave::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_team_leave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jiacheng_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(jiacheng_));
  _internal_metadata_.Clear();
}

bool smsg_team_leave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_team_leave)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 leader = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 jiacheng = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jiacheng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_team_leave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_team_leave)
  return false;
#undef DO_
}

void smsg_team_leave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_team_leave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // uint64 leader = 2;
  if (this->leader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->leader(), output);
  }

  // int32 level = 3;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // int32 jiacheng = 4;
  if (this->jiacheng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->jiacheng(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_team_leave)
}

::google::protobuf::uint8* smsg_team_leave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_team_leave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // uint64 leader = 2;
  if (this->leader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->leader(), target);
  }

  // int32 level = 3;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // int32 jiacheng = 4;
  if (this->jiacheng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->jiacheng(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_team_leave)
  return target;
}

size_t smsg_team_leave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_team_leave)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // uint64 leader = 2;
  if (this->leader() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader());
  }

  // int32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 jiacheng = 4;
  if (this->jiacheng() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->jiacheng());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_team_leave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_team_leave)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_team_leave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_team_leave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_team_leave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_team_leave)
    MergeFrom(*source);
  }
}

void smsg_team_leave::MergeFrom(const smsg_team_leave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_team_leave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.leader() != 0) {
    set_leader(from.leader());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.jiacheng() != 0) {
    set_jiacheng(from.jiacheng());
  }
}

void smsg_team_leave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_team_leave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_team_leave::CopyFrom(const smsg_team_leave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_team_leave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_team_leave::IsInitialized() const {
  return true;
}

void smsg_team_leave::Swap(smsg_team_leave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_team_leave::InternalSwap(smsg_team_leave* other) {
  using std::swap;
  swap(guid_, other->guid_);
  swap(leader_, other->leader_);
  swap(level_, other->level_);
  swap(jiacheng_, other->jiacheng_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_team_leave::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_team_kick::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_team_kick::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_team_kick::cmsg_team_kick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_cmsg_team_kick.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.cmsg_team_kick)
}
cmsg_team_kick::cmsg_team_kick(const cmsg_team_kick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.team.cmsg_team_kick)
}

void cmsg_team_kick::SharedCtor() {
  guid_ = GOOGLE_ULONGLONG(0);
}

cmsg_team_kick::~cmsg_team_kick() {
  // @@protoc_insertion_point(destructor:protocol.team.cmsg_team_kick)
  SharedDtor();
}

void cmsg_team_kick::SharedDtor() {
}

void cmsg_team_kick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_team_kick::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_team_kick& cmsg_team_kick::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_cmsg_team_kick.base);
  return *internal_default_instance();
}


void cmsg_team_kick::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.cmsg_team_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool cmsg_team_kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.cmsg_team_kick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.cmsg_team_kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.cmsg_team_kick)
  return false;
#undef DO_
}

void cmsg_team_kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.cmsg_team_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.cmsg_team_kick)
}

::google::protobuf::uint8* cmsg_team_kick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.cmsg_team_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.cmsg_team_kick)
  return target;
}

size_t cmsg_team_kick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.cmsg_team_kick)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_team_kick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.cmsg_team_kick)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_team_kick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_team_kick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.cmsg_team_kick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.cmsg_team_kick)
    MergeFrom(*source);
  }
}

void cmsg_team_kick::MergeFrom(const cmsg_team_kick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.cmsg_team_kick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
}

void cmsg_team_kick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.cmsg_team_kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_team_kick::CopyFrom(const cmsg_team_kick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.cmsg_team_kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_team_kick::IsInitialized() const {
  return true;
}

void cmsg_team_kick::Swap(cmsg_team_kick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_team_kick::InternalSwap(cmsg_team_kick* other) {
  using std::swap;
  swap(guid_, other->guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_team_kick::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_team_prepare::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_team_prepare::kGuidFieldNumber;
const int smsg_team_prepare::kPrepareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_team_prepare::smsg_team_prepare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_team_prepare.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_team_prepare)
}
smsg_team_prepare::smsg_team_prepare(const smsg_team_prepare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&prepare_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(prepare_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_team_prepare)
}

void smsg_team_prepare::SharedCtor() {
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(prepare_));
}

smsg_team_prepare::~smsg_team_prepare() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_team_prepare)
  SharedDtor();
}

void smsg_team_prepare::SharedDtor() {
}

void smsg_team_prepare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_team_prepare::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_team_prepare& smsg_team_prepare::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_team_prepare.base);
  return *internal_default_instance();
}


void smsg_team_prepare::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_team_prepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(prepare_));
  _internal_metadata_.Clear();
}

bool smsg_team_prepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_team_prepare)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prepare = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prepare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_team_prepare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_team_prepare)
  return false;
#undef DO_
}

void smsg_team_prepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_team_prepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // bool prepare = 2;
  if (this->prepare() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->prepare(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_team_prepare)
}

::google::protobuf::uint8* smsg_team_prepare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_team_prepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // bool prepare = 2;
  if (this->prepare() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->prepare(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_team_prepare)
  return target;
}

size_t smsg_team_prepare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_team_prepare)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // bool prepare = 2;
  if (this->prepare() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_team_prepare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_team_prepare)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_team_prepare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_team_prepare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_team_prepare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_team_prepare)
    MergeFrom(*source);
  }
}

void smsg_team_prepare::MergeFrom(const smsg_team_prepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_team_prepare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.prepare() != 0) {
    set_prepare(from.prepare());
  }
}

void smsg_team_prepare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_team_prepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_team_prepare::CopyFrom(const smsg_team_prepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_team_prepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_team_prepare::IsInitialized() const {
  return true;
}

void smsg_team_prepare::Swap(smsg_team_prepare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_team_prepare::InternalSwap(smsg_team_prepare* other) {
  using std::swap;
  swap(guid_, other->guid_);
  swap(prepare_, other->prepare_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_team_prepare::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_team_move::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_team_move::kGuidFieldNumber;
const int cmsg_team_move::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_team_move::cmsg_team_move()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_cmsg_team_move.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.cmsg_team_move)
}
cmsg_team_move::cmsg_team_move(const cmsg_team_move& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.cmsg_team_move)
}

void cmsg_team_move::SharedCtor() {
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(index_));
}

cmsg_team_move::~cmsg_team_move() {
  // @@protoc_insertion_point(destructor:protocol.team.cmsg_team_move)
  SharedDtor();
}

void cmsg_team_move::SharedDtor() {
}

void cmsg_team_move::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_team_move::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_team_move& cmsg_team_move::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_cmsg_team_move.base);
  return *internal_default_instance();
}


void cmsg_team_move::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.cmsg_team_move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

bool cmsg_team_move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.cmsg_team_move)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.cmsg_team_move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.cmsg_team_move)
  return false;
#undef DO_
}

void cmsg_team_move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.cmsg_team_move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.cmsg_team_move)
}

::google::protobuf::uint8* cmsg_team_move::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.cmsg_team_move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.cmsg_team_move)
  return target;
}

size_t cmsg_team_move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.cmsg_team_move)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_team_move::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.cmsg_team_move)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_team_move* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_team_move>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.cmsg_team_move)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.cmsg_team_move)
    MergeFrom(*source);
  }
}

void cmsg_team_move::MergeFrom(const cmsg_team_move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.cmsg_team_move)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void cmsg_team_move::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.cmsg_team_move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_team_move::CopyFrom(const cmsg_team_move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.cmsg_team_move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_team_move::IsInitialized() const {
  return true;
}

void cmsg_team_move::Swap(cmsg_team_move* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_team_move::InternalSwap(cmsg_team_move* other) {
  using std::swap;
  swap(guid_, other->guid_);
  swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_team_move::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_team_move::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_team_move::kGuidFieldNumber;
const int smsg_team_move::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_team_move::smsg_team_move()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_team_move.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_team_move)
}
smsg_team_move::smsg_team_move(const smsg_team_move& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_team_move)
}

void smsg_team_move::SharedCtor() {
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(index_));
}

smsg_team_move::~smsg_team_move() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_team_move)
  SharedDtor();
}

void smsg_team_move::SharedDtor() {
}

void smsg_team_move::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_team_move::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_team_move& smsg_team_move::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_team_move.base);
  return *internal_default_instance();
}


void smsg_team_move::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_team_move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

bool smsg_team_move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_team_move)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_team_move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_team_move)
  return false;
#undef DO_
}

void smsg_team_move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_team_move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_team_move)
}

::google::protobuf::uint8* smsg_team_move::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_team_move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_team_move)
  return target;
}

size_t smsg_team_move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_team_move)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_team_move::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_team_move)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_team_move* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_team_move>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_team_move)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_team_move)
    MergeFrom(*source);
  }
}

void smsg_team_move::MergeFrom(const smsg_team_move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_team_move)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void smsg_team_move::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_team_move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_team_move::CopyFrom(const smsg_team_move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_team_move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_team_move::IsInitialized() const {
  return true;
}

void smsg_team_move::Swap(smsg_team_move* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_team_move::InternalSwap(smsg_team_move* other) {
  using std::swap;
  swap(guid_, other->guid_);
  swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_team_move::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_fight_team::InitAsDefaultInstance() {
  ::protocol::team::_smsg_fight_team_default_instance_._instance.get_mutable()->text_ = const_cast< ::protocol::team::bingyuan_fight_text*>(
      ::protocol::team::bingyuan_fight_text::internal_default_instance());
  ::protocol::team::_smsg_fight_team_default_instance_._instance.get_mutable()->oteam_ = const_cast< ::protocol::team::team*>(
      ::protocol::team::team::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_fight_team::kIdFieldNumber;
const int smsg_fight_team::kWinFieldNumber;
const int smsg_fight_team::kTextFieldNumber;
const int smsg_fight_team::kOteamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_fight_team::smsg_fight_team()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_fight_team.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_fight_team)
}
smsg_fight_team::smsg_fight_team(const smsg_fight_team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_text()) {
    text_ = new ::protocol::team::bingyuan_fight_text(*from.text_);
  } else {
    text_ = NULL;
  }
  if (from.has_oteam()) {
    oteam_ = new ::protocol::team::team(*from.oteam_);
  } else {
    oteam_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&win_) -
    reinterpret_cast<char*>(&id_)) + sizeof(win_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_fight_team)
}

void smsg_fight_team::SharedCtor() {
  ::memset(&text_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&win_) -
      reinterpret_cast<char*>(&text_)) + sizeof(win_));
}

smsg_fight_team::~smsg_fight_team() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_fight_team)
  SharedDtor();
}

void smsg_fight_team::SharedDtor() {
  if (this != internal_default_instance()) delete text_;
  if (this != internal_default_instance()) delete oteam_;
}

void smsg_fight_team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_fight_team::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_fight_team& smsg_fight_team::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_fight_team.base);
  return *internal_default_instance();
}


void smsg_fight_team::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_fight_team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
  if (GetArenaNoVirtual() == NULL && oteam_ != NULL) {
    delete oteam_;
  }
  oteam_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&win_) -
      reinterpret_cast<char*>(&id_)) + sizeof(win_));
  _internal_metadata_.Clear();
}

bool smsg_fight_team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_fight_team)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 win = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.team.bingyuan_fight_text text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.team.team oteam = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oteam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_fight_team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_fight_team)
  return false;
#undef DO_
}

void smsg_fight_team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_fight_team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // uint64 win = 2;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->win(), output);
  }

  // .protocol.team.bingyuan_fight_text text = 3;
  if (this->has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_text(), output);
  }

  // .protocol.team.team oteam = 4;
  if (this->has_oteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_oteam(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_fight_team)
}

::google::protobuf::uint8* smsg_fight_team::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_fight_team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // uint64 win = 2;
  if (this->win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->win(), target);
  }

  // .protocol.team.bingyuan_fight_text text = 3;
  if (this->has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_text(), deterministic, target);
  }

  // .protocol.team.team oteam = 4;
  if (this->has_oteam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_oteam(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_fight_team)
  return target;
}

size_t smsg_fight_team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_fight_team)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .protocol.team.bingyuan_fight_text text = 3;
  if (this->has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *text_);
  }

  // .protocol.team.team oteam = 4;
  if (this->has_oteam()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *oteam_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 win = 2;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->win());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_fight_team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_fight_team)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_fight_team* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_fight_team>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_fight_team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_fight_team)
    MergeFrom(*source);
  }
}

void smsg_fight_team::MergeFrom(const smsg_fight_team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_fight_team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    mutable_text()->::protocol::team::bingyuan_fight_text::MergeFrom(from.text());
  }
  if (from.has_oteam()) {
    mutable_oteam()->::protocol::team::team::MergeFrom(from.oteam());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.win() != 0) {
    set_win(from.win());
  }
}

void smsg_fight_team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_fight_team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_fight_team::CopyFrom(const smsg_fight_team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_fight_team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_fight_team::IsInitialized() const {
  return true;
}

void smsg_fight_team::Swap(smsg_fight_team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_fight_team::InternalSwap(smsg_fight_team* other) {
  using std::swap;
  swap(text_, other->text_);
  swap(oteam_, other->oteam_);
  swap(id_, other->id_);
  swap(win_, other->win_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_fight_team::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_chat_team::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_chat_team::kTextFieldNumber;
const int cmsg_chat_team::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_chat_team::cmsg_chat_team()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_cmsg_chat_team.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.cmsg_chat_team)
}
cmsg_chat_team::cmsg_chat_team(const cmsg_chat_team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.color().size() > 0) {
    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.team.cmsg_chat_team)
}

void cmsg_chat_team::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

cmsg_chat_team::~cmsg_chat_team() {
  // @@protoc_insertion_point(destructor:protocol.team.cmsg_chat_team)
  SharedDtor();
}

void cmsg_chat_team::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void cmsg_chat_team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_chat_team::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_chat_team& cmsg_chat_team::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_cmsg_chat_team.base);
  return *internal_default_instance();
}


void cmsg_chat_team::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.cmsg_chat_team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  set_changed();
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool cmsg_chat_team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.cmsg_chat_team)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.cmsg_chat_team.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->color().data(), static_cast<int>(this->color().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.cmsg_chat_team.color"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.cmsg_chat_team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.cmsg_chat_team)
  return false;
#undef DO_
}

void cmsg_chat_team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.cmsg_chat_team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.cmsg_chat_team.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // string color = 4;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.cmsg_chat_team.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->color(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.cmsg_chat_team)
}

::google::protobuf::uint8* cmsg_chat_team::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.cmsg_chat_team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.cmsg_chat_team.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // string color = 4;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.cmsg_chat_team.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->color(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.cmsg_chat_team)
  return target;
}

size_t cmsg_chat_team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.cmsg_chat_team)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // string color = 4;
  if (this->color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_chat_team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.cmsg_chat_team)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_chat_team* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_chat_team>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.cmsg_chat_team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.cmsg_chat_team)
    MergeFrom(*source);
  }
}

void cmsg_chat_team::MergeFrom(const cmsg_chat_team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.cmsg_chat_team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.color().size() > 0) {

    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
}

void cmsg_chat_team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.cmsg_chat_team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_chat_team::CopyFrom(const cmsg_chat_team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.cmsg_chat_team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_chat_team::IsInitialized() const {
  return true;
}

void cmsg_chat_team::Swap(cmsg_chat_team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_chat_team::InternalSwap(cmsg_chat_team* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  color_.Swap(&other->color_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_chat_team::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_chat_team::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_chat_team::kPlayerGuidFieldNumber;
const int smsg_chat_team::kPlayerNameFieldNumber;
const int smsg_chat_team::kPlayerTemplateFieldNumber;
const int smsg_chat_team::kVipFieldNumber;
const int smsg_chat_team::kLevelFieldNumber;
const int smsg_chat_team::kTextFieldNumber;
const int smsg_chat_team::kColorFieldNumber;
const int smsg_chat_team::kPlayerNalflagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_chat_team::smsg_chat_team()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_chat_team.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_chat_team)
}
smsg_chat_team::smsg_chat_team(const smsg_chat_team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.player_name().size() > 0) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.color().size() > 0) {
    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  ::memcpy(&player_guid_, &from.player_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_nalflag_) -
    reinterpret_cast<char*>(&player_guid_)) + sizeof(player_nalflag_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_chat_team)
}

void smsg_chat_team::SharedCtor() {
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_nalflag_) -
      reinterpret_cast<char*>(&player_guid_)) + sizeof(player_nalflag_));
}

smsg_chat_team::~smsg_chat_team() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_chat_team)
  SharedDtor();
}

void smsg_chat_team::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void smsg_chat_team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_chat_team::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_chat_team& smsg_chat_team::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_chat_team.base);
  return *internal_default_instance();
}


void smsg_chat_team::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_chat_team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  set_changed();
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  set_changed();
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_nalflag_) -
      reinterpret_cast<char*>(&player_guid_)) + sizeof(player_nalflag_));
  _internal_metadata_.Clear();
}

bool smsg_chat_team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_chat_team)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 player_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player_name().data(), static_cast<int>(this->player_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.smsg_chat_team.player_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 player_template = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_template_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.smsg_chat_team.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string color = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->color().data(), static_cast<int>(this->color().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.smsg_chat_team.color"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 player_nalflag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_nalflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_chat_team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_chat_team)
  return false;
#undef DO_
}

void smsg_chat_team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_chat_team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_guid = 1;
  if (this->player_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // string player_name = 2;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_chat_team.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  // uint32 player_template = 3;
  if (this->player_template() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_template(), output);
  }

  // int32 vip = 4;
  if (this->vip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip(), output);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // string text = 6;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_chat_team.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->text(), output);
  }

  // string color = 7;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_chat_team.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->color(), output);
  }

  // int32 player_nalflag = 8;
  if (this->player_nalflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->player_nalflag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_chat_team)
}

::google::protobuf::uint8* smsg_chat_team::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_chat_team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_guid = 1;
  if (this->player_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // string player_name = 2;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_chat_team.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // uint32 player_template = 3;
  if (this->player_template() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_template(), target);
  }

  // int32 vip = 4;
  if (this->vip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip(), target);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // string text = 6;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_chat_team.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  // string color = 7;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_chat_team.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->color(), target);
  }

  // int32 player_nalflag = 8;
  if (this->player_nalflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->player_nalflag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_chat_team)
  return target;
}

size_t smsg_chat_team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_chat_team)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string player_name = 2;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_name());
  }

  // string text = 6;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // string color = 7;
  if (this->color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->color());
  }

  // uint64 player_guid = 1;
  if (this->player_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  // uint32 player_template = 3;
  if (this->player_template() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_template());
  }

  // int32 vip = 4;
  if (this->vip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vip());
  }

  // int32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 player_nalflag = 8;
  if (this->player_nalflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_nalflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_chat_team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_chat_team)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_chat_team* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_chat_team>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_chat_team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_chat_team)
    MergeFrom(*source);
  }
}

void smsg_chat_team::MergeFrom(const smsg_chat_team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_chat_team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_name().size() > 0) {

    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.color().size() > 0) {

    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  if (from.player_guid() != 0) {
    set_player_guid(from.player_guid());
  }
  if (from.player_template() != 0) {
    set_player_template(from.player_template());
  }
  if (from.vip() != 0) {
    set_vip(from.vip());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.player_nalflag() != 0) {
    set_player_nalflag(from.player_nalflag());
  }
}

void smsg_chat_team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_chat_team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_chat_team::CopyFrom(const smsg_chat_team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_chat_team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_chat_team::IsInitialized() const {
  return true;
}

void smsg_chat_team::Swap(smsg_chat_team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_chat_team::InternalSwap(smsg_chat_team* other) {
  using std::swap;
  player_name_.Swap(&other->player_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  color_.Swap(&other->color_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_guid_, other->player_guid_);
  swap(player_template_, other->player_template_);
  swap(vip_, other->vip_);
  swap(level_, other->level_);
  swap(player_nalflag_, other->player_nalflag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_chat_team::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_player_look::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_player_look::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_player_look::cmsg_player_look()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_cmsg_player_look.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.cmsg_player_look)
}
cmsg_player_look::cmsg_player_look(const cmsg_player_look& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.team.cmsg_player_look)
}

void cmsg_player_look::SharedCtor() {
  guid_ = GOOGLE_ULONGLONG(0);
}

cmsg_player_look::~cmsg_player_look() {
  // @@protoc_insertion_point(destructor:protocol.team.cmsg_player_look)
  SharedDtor();
}

void cmsg_player_look::SharedDtor() {
}

void cmsg_player_look::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_player_look::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_player_look& cmsg_player_look::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_cmsg_player_look.base);
  return *internal_default_instance();
}


void cmsg_player_look::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.cmsg_player_look)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool cmsg_player_look::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.cmsg_player_look)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.cmsg_player_look)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.cmsg_player_look)
  return false;
#undef DO_
}

void cmsg_player_look::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.cmsg_player_look)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.cmsg_player_look)
}

::google::protobuf::uint8* cmsg_player_look::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.cmsg_player_look)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.cmsg_player_look)
  return target;
}

size_t cmsg_player_look::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.cmsg_player_look)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_player_look::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.cmsg_player_look)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_player_look* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_player_look>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.cmsg_player_look)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.cmsg_player_look)
    MergeFrom(*source);
  }
}

void cmsg_player_look::MergeFrom(const cmsg_player_look& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.cmsg_player_look)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
}

void cmsg_player_look::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.cmsg_player_look)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_player_look::CopyFrom(const cmsg_player_look& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.cmsg_player_look)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_player_look::IsInitialized() const {
  return true;
}

void cmsg_player_look::Swap(cmsg_player_look* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_player_look::InternalSwap(cmsg_player_look* other) {
  using std::swap;
  swap(guid_, other->guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_player_look::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_player_look::InitAsDefaultInstance() {
}
void smsg_player_look::clear_roles() {
  roles_.Clear();
}
void smsg_player_look::clear_equips() {
  equips_.Clear();
}
void smsg_player_look::clear_treasures() {
  treasures_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_player_look::kTemplateIdFieldNumber;
const int smsg_player_look::kLevelFieldNumber;
const int smsg_player_look::kNameFieldNumber;
const int smsg_player_look::kBfFieldNumber;
const int smsg_player_look::kVipFieldNumber;
const int smsg_player_look::kRolesFieldNumber;
const int smsg_player_look::kEquipsFieldNumber;
const int smsg_player_look::kTreasuresFieldNumber;
const int smsg_player_look::kDuixingsFieldNumber;
const int smsg_player_look::kGuildFieldNumber;
const int smsg_player_look::kAchievesFieldNumber;
const int smsg_player_look::kNalflagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_player_look::smsg_player_look()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_player_look.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_player_look)
}
smsg_player_look::smsg_player_look(const smsg_player_look& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      roles_(from.roles_),
      equips_(from.equips_),
      treasures_(from.treasures_),
      duixings_(from.duixings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  guild_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.guild().size() > 0) {
    guild_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_);
  }
  ::memcpy(&template_id_, &from.template_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&nalflag_) -
    reinterpret_cast<char*>(&template_id_)) + sizeof(nalflag_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_player_look)
}

void smsg_player_look::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&template_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nalflag_) -
      reinterpret_cast<char*>(&template_id_)) + sizeof(nalflag_));
}

smsg_player_look::~smsg_player_look() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_player_look)
  SharedDtor();
}

void smsg_player_look::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void smsg_player_look::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_player_look::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_player_look& smsg_player_look::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_player_look.base);
  return *internal_default_instance();
}


void smsg_player_look::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_player_look)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  equips_.Clear();
  treasures_.Clear();
  set_changed();
  duixings_.Clear();
  set_changed();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  set_changed();
  guild_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&template_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nalflag_) -
      reinterpret_cast<char*>(&template_id_)) + sizeof(nalflag_));
  _internal_metadata_.Clear();
}

bool smsg_player_look::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_player_look)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 template_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.smsg_player_look.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dhc.role_t roles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_roles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dhc.equip_t equips = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dhc.treasure_t treasures = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_treasures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 duixings = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_duixings())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74u, input, this->mutable_duixings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string guild = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guild().data(), static_cast<int>(this->guild().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.smsg_player_look.guild"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 achieves = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieves_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nalflag = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nalflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_player_look)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_player_look)
  return false;
#undef DO_
}

void smsg_player_look::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_player_look)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 template_id = 1;
  if (this->template_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->template_id(), output);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_player_look.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // int32 bf = 4;
  if (this->bf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bf(), output);
  }

  // int32 vip = 5;
  if (this->vip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vip(), output);
  }

  // repeated .dhc.role_t roles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->roles(static_cast<int>(i)),
      output);
  }

  // repeated .dhc.equip_t equips = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equips_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->equips(static_cast<int>(i)),
      output);
  }

  // repeated .dhc.treasure_t treasures = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->treasures_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->treasures(static_cast<int>(i)),
      output);
  }

  // repeated int32 duixings = 9;
  if (this->duixings_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _duixings_cached_byte_size_));
  }
  for (int i = 0, n = this->duixings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->duixings(i), output);
  }

  // string guild = 10;
  if (this->guild().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild().data(), static_cast<int>(this->guild().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_player_look.guild");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->guild(), output);
  }

  // int32 achieves = 11;
  if (this->achieves() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->achieves(), output);
  }

  // int32 nalflag = 12;
  if (this->nalflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->nalflag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_player_look)
}

::google::protobuf::uint8* smsg_player_look::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_player_look)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 template_id = 1;
  if (this->template_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->template_id(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_player_look.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // int32 bf = 4;
  if (this->bf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bf(), target);
  }

  // int32 vip = 5;
  if (this->vip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vip(), target);
  }

  // repeated .dhc.role_t roles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->roles(static_cast<int>(i)), deterministic, target);
  }

  // repeated .dhc.equip_t equips = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equips_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->equips(static_cast<int>(i)), deterministic, target);
  }

  // repeated .dhc.treasure_t treasures = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->treasures_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->treasures(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 duixings = 9;
  if (this->duixings_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _duixings_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->duixings_, target);
  }

  // string guild = 10;
  if (this->guild().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guild().data(), static_cast<int>(this->guild().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_player_look.guild");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->guild(), target);
  }

  // int32 achieves = 11;
  if (this->achieves() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->achieves(), target);
  }

  // int32 nalflag = 12;
  if (this->nalflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->nalflag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_player_look)
  return target;
}

size_t smsg_player_look::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_player_look)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dhc.role_t roles = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->roles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roles(static_cast<int>(i)));
    }
  }

  // repeated .dhc.equip_t equips = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->equips_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->equips(static_cast<int>(i)));
    }
  }

  // repeated .dhc.treasure_t treasures = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->treasures_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->treasures(static_cast<int>(i)));
    }
  }

  // repeated int32 duixings = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->duixings_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _duixings_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string guild = 10;
  if (this->guild().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild());
  }

  // uint32 template_id = 1;
  if (this->template_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->template_id());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 bf = 4;
  if (this->bf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bf());
  }

  // int32 vip = 5;
  if (this->vip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vip());
  }

  // int32 achieves = 11;
  if (this->achieves() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->achieves());
  }

  // int32 nalflag = 12;
  if (this->nalflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nalflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_player_look::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_player_look)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_player_look* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_player_look>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_player_look)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_player_look)
    MergeFrom(*source);
  }
}

void smsg_player_look::MergeFrom(const smsg_player_look& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_player_look)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  equips_.MergeFrom(from.equips_);
  treasures_.MergeFrom(from.treasures_);
  duixings_.MergeFrom(from.duixings_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.guild().size() > 0) {

    guild_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_);
  }
  if (from.template_id() != 0) {
    set_template_id(from.template_id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.bf() != 0) {
    set_bf(from.bf());
  }
  if (from.vip() != 0) {
    set_vip(from.vip());
  }
  if (from.achieves() != 0) {
    set_achieves(from.achieves());
  }
  if (from.nalflag() != 0) {
    set_nalflag(from.nalflag());
  }
}

void smsg_player_look::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_player_look)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_player_look::CopyFrom(const smsg_player_look& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_player_look)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_player_look::IsInitialized() const {
  return true;
}

void smsg_player_look::Swap(smsg_player_look* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_player_look::InternalSwap(smsg_player_look* other) {
  using std::swap;
  CastToBase(&roles_)->InternalSwap(CastToBase(&other->roles_));
  CastToBase(&equips_)->InternalSwap(CastToBase(&other->equips_));
  CastToBase(&treasures_)->InternalSwap(CastToBase(&other->treasures_));
  duixings_.InternalSwap(&other->duixings_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guild_.Swap(&other->guild_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(template_id_, other->template_id_);
  swap(level_, other->level_);
  swap(bf_, other->bf_);
  swap(vip_, other->vip_);
  swap(achieves_, other->achieves_);
  swap(nalflag_, other->nalflag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_player_look::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_invite_add::InitAsDefaultInstance() {
  ::protocol::team::_smsg_invite_add_default_instance_._instance.get_mutable()->invite_ = const_cast< ::protocol::team::team_invite*>(
      ::protocol::team::team_invite::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_invite_add::kInviteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_invite_add::smsg_invite_add()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_invite_add.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_invite_add)
}
smsg_invite_add::smsg_invite_add(const smsg_invite_add& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_invite()) {
    invite_ = new ::protocol::team::team_invite(*from.invite_);
  } else {
    invite_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_invite_add)
}

void smsg_invite_add::SharedCtor() {
  invite_ = NULL;
}

smsg_invite_add::~smsg_invite_add() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_invite_add)
  SharedDtor();
}

void smsg_invite_add::SharedDtor() {
  if (this != internal_default_instance()) delete invite_;
}

void smsg_invite_add::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_invite_add::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_invite_add& smsg_invite_add::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_invite_add.base);
  return *internal_default_instance();
}


void smsg_invite_add::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_invite_add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && invite_ != NULL) {
    delete invite_;
  }
  invite_ = NULL;
  _internal_metadata_.Clear();
}

bool smsg_invite_add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_invite_add)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.team.team_invite invite = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_invite()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_invite_add)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_invite_add)
  return false;
#undef DO_
}

void smsg_invite_add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_invite_add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.team.team_invite invite = 1;
  if (this->has_invite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_invite(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_invite_add)
}

::google::protobuf::uint8* smsg_invite_add::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_invite_add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.team.team_invite invite = 1;
  if (this->has_invite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_invite(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_invite_add)
  return target;
}

size_t smsg_invite_add::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_invite_add)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .protocol.team.team_invite invite = 1;
  if (this->has_invite()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *invite_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_invite_add::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_invite_add)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_invite_add* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_invite_add>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_invite_add)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_invite_add)
    MergeFrom(*source);
  }
}

void smsg_invite_add::MergeFrom(const smsg_invite_add& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_invite_add)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_invite()) {
    mutable_invite()->::protocol::team::team_invite::MergeFrom(from.invite());
  }
}

void smsg_invite_add::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_invite_add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_invite_add::CopyFrom(const smsg_invite_add& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_invite_add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_invite_add::IsInitialized() const {
  return true;
}

void smsg_invite_add::Swap(smsg_invite_add* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_invite_add::InternalSwap(smsg_invite_add* other) {
  using std::swap;
  swap(invite_, other->invite_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_invite_add::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_invite_agree::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_invite_agree::kAgreeFieldNumber;
const int cmsg_invite_agree::kInviteIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_invite_agree::cmsg_invite_agree()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_cmsg_invite_agree.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.cmsg_invite_agree)
}
cmsg_invite_agree::cmsg_invite_agree(const cmsg_invite_agree& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&invite_id_, &from.invite_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&agree_) -
    reinterpret_cast<char*>(&invite_id_)) + sizeof(agree_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.cmsg_invite_agree)
}

void cmsg_invite_agree::SharedCtor() {
  ::memset(&invite_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agree_) -
      reinterpret_cast<char*>(&invite_id_)) + sizeof(agree_));
}

cmsg_invite_agree::~cmsg_invite_agree() {
  // @@protoc_insertion_point(destructor:protocol.team.cmsg_invite_agree)
  SharedDtor();
}

void cmsg_invite_agree::SharedDtor() {
}

void cmsg_invite_agree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_invite_agree::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_invite_agree& cmsg_invite_agree::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_cmsg_invite_agree.base);
  return *internal_default_instance();
}


void cmsg_invite_agree::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.cmsg_invite_agree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&invite_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agree_) -
      reinterpret_cast<char*>(&invite_id_)) + sizeof(agree_));
  _internal_metadata_.Clear();
}

bool cmsg_invite_agree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.cmsg_invite_agree)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool agree = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 invite_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.cmsg_invite_agree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.cmsg_invite_agree)
  return false;
#undef DO_
}

void cmsg_invite_agree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.cmsg_invite_agree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool agree = 1;
  if (this->agree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->agree(), output);
  }

  // uint64 invite_id = 2;
  if (this->invite_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->invite_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.cmsg_invite_agree)
}

::google::protobuf::uint8* cmsg_invite_agree::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.cmsg_invite_agree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool agree = 1;
  if (this->agree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->agree(), target);
  }

  // uint64 invite_id = 2;
  if (this->invite_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->invite_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.cmsg_invite_agree)
  return target;
}

size_t cmsg_invite_agree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.cmsg_invite_agree)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 invite_id = 2;
  if (this->invite_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->invite_id());
  }

  // bool agree = 1;
  if (this->agree() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_invite_agree::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.cmsg_invite_agree)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_invite_agree* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_invite_agree>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.cmsg_invite_agree)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.cmsg_invite_agree)
    MergeFrom(*source);
  }
}

void cmsg_invite_agree::MergeFrom(const cmsg_invite_agree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.cmsg_invite_agree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.invite_id() != 0) {
    set_invite_id(from.invite_id());
  }
  if (from.agree() != 0) {
    set_agree(from.agree());
  }
}

void cmsg_invite_agree::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.cmsg_invite_agree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_invite_agree::CopyFrom(const cmsg_invite_agree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.cmsg_invite_agree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_invite_agree::IsInitialized() const {
  return true;
}

void cmsg_invite_agree::Swap(cmsg_invite_agree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_invite_agree::InternalSwap(cmsg_invite_agree* other) {
  using std::swap;
  swap(invite_id_, other->invite_id_);
  swap(agree_, other->agree_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_invite_agree::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_invite_remove::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_invite_remove::kInviteIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_invite_remove::smsg_invite_remove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_invite_remove.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_invite_remove)
}
smsg_invite_remove::smsg_invite_remove(const smsg_invite_remove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invite_id_ = from.invite_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_invite_remove)
}

void smsg_invite_remove::SharedCtor() {
  invite_id_ = GOOGLE_ULONGLONG(0);
}

smsg_invite_remove::~smsg_invite_remove() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_invite_remove)
  SharedDtor();
}

void smsg_invite_remove::SharedDtor() {
}

void smsg_invite_remove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_invite_remove::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_invite_remove& smsg_invite_remove::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_invite_remove.base);
  return *internal_default_instance();
}


void smsg_invite_remove::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_invite_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  invite_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool smsg_invite_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_invite_remove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 invite_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_invite_remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_invite_remove)
  return false;
#undef DO_
}

void smsg_invite_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_invite_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 invite_id = 1;
  if (this->invite_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invite_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_invite_remove)
}

::google::protobuf::uint8* smsg_invite_remove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_invite_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 invite_id = 1;
  if (this->invite_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invite_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_invite_remove)
  return target;
}

size_t smsg_invite_remove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_invite_remove)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 invite_id = 1;
  if (this->invite_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->invite_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_invite_remove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_invite_remove)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_invite_remove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_invite_remove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_invite_remove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_invite_remove)
    MergeFrom(*source);
  }
}

void smsg_invite_remove::MergeFrom(const smsg_invite_remove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_invite_remove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.invite_id() != 0) {
    set_invite_id(from.invite_id());
  }
}

void smsg_invite_remove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_invite_remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_invite_remove::CopyFrom(const smsg_invite_remove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_invite_remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_invite_remove::IsInitialized() const {
  return true;
}

void smsg_invite_remove::Swap(smsg_invite_remove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_invite_remove::InternalSwap(smsg_invite_remove* other) {
  using std::swap;
  swap(invite_id_, other->invite_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_invite_remove::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_invite_remove_social::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_invite_remove_social::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_invite_remove_social::smsg_invite_remove_social()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_invite_remove_social.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_invite_remove_social)
}
smsg_invite_remove_social::smsg_invite_remove_social(const smsg_invite_remove_social& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_invite_remove_social)
}

void smsg_invite_remove_social::SharedCtor() {
  guid_ = GOOGLE_ULONGLONG(0);
}

smsg_invite_remove_social::~smsg_invite_remove_social() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_invite_remove_social)
  SharedDtor();
}

void smsg_invite_remove_social::SharedDtor() {
}

void smsg_invite_remove_social::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_invite_remove_social::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_invite_remove_social& smsg_invite_remove_social::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_invite_remove_social.base);
  return *internal_default_instance();
}


void smsg_invite_remove_social::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_invite_remove_social)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool smsg_invite_remove_social::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_invite_remove_social)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_invite_remove_social)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_invite_remove_social)
  return false;
#undef DO_
}

void smsg_invite_remove_social::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_invite_remove_social)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_invite_remove_social)
}

::google::protobuf::uint8* smsg_invite_remove_social::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_invite_remove_social)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_invite_remove_social)
  return target;
}

size_t smsg_invite_remove_social::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_invite_remove_social)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_invite_remove_social::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_invite_remove_social)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_invite_remove_social* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_invite_remove_social>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_invite_remove_social)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_invite_remove_social)
    MergeFrom(*source);
  }
}

void smsg_invite_remove_social::MergeFrom(const smsg_invite_remove_social& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_invite_remove_social)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
}

void smsg_invite_remove_social::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_invite_remove_social)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_invite_remove_social::CopyFrom(const smsg_invite_remove_social& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_invite_remove_social)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_invite_remove_social::IsInitialized() const {
  return true;
}

void smsg_invite_remove_social::Swap(smsg_invite_remove_social* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_invite_remove_social::InternalSwap(smsg_invite_remove_social* other) {
  using std::swap;
  swap(guid_, other->guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_invite_remove_social::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_invite_all::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_invite_all::kNextTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_invite_all::smsg_invite_all()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_invite_all.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_invite_all)
}
smsg_invite_all::smsg_invite_all(const smsg_invite_all& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_time_ = from.next_time_;
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_invite_all)
}

void smsg_invite_all::SharedCtor() {
  next_time_ = GOOGLE_ULONGLONG(0);
}

smsg_invite_all::~smsg_invite_all() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_invite_all)
  SharedDtor();
}

void smsg_invite_all::SharedDtor() {
}

void smsg_invite_all::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_invite_all::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_invite_all& smsg_invite_all::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_invite_all.base);
  return *internal_default_instance();
}


void smsg_invite_all::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_invite_all)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  next_time_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool smsg_invite_all::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_invite_all)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 next_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_invite_all)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_invite_all)
  return false;
#undef DO_
}

void smsg_invite_all::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_invite_all)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 next_time = 1;
  if (this->next_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->next_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_invite_all)
}

::google::protobuf::uint8* smsg_invite_all::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_invite_all)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 next_time = 1;
  if (this->next_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->next_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_invite_all)
  return target;
}

size_t smsg_invite_all::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_invite_all)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 next_time = 1;
  if (this->next_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->next_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_invite_all::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_invite_all)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_invite_all* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_invite_all>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_invite_all)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_invite_all)
    MergeFrom(*source);
  }
}

void smsg_invite_all::MergeFrom(const smsg_invite_all& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_invite_all)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.next_time() != 0) {
    set_next_time(from.next_time());
  }
}

void smsg_invite_all::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_invite_all)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_invite_all::CopyFrom(const smsg_invite_all& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_invite_all)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_invite_all::IsInitialized() const {
  return true;
}

void smsg_invite_all::Swap(smsg_invite_all* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_invite_all::InternalSwap(smsg_invite_all* other) {
  using std::swap;
  swap(next_time_, other->next_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_invite_all::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_team_player_reward_change::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_team_player_reward_change::kGuidFieldNumber;
const int smsg_team_player_reward_change::kNumFieldNumber;
const int smsg_team_player_reward_change::kPointFieldNumber;
const int smsg_team_player_reward_change::kRankFieldNumber;
const int smsg_team_player_reward_change::kChenghaoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_team_player_reward_change::smsg_team_player_reward_change()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_team_player_reward_change.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_team_player_reward_change)
}
smsg_team_player_reward_change::smsg_team_player_reward_change(const smsg_team_player_reward_change& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chenghao_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(chenghao_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_team_player_reward_change)
}

void smsg_team_player_reward_change::SharedCtor() {
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chenghao_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(chenghao_));
}

smsg_team_player_reward_change::~smsg_team_player_reward_change() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_team_player_reward_change)
  SharedDtor();
}

void smsg_team_player_reward_change::SharedDtor() {
}

void smsg_team_player_reward_change::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_team_player_reward_change::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_team_player_reward_change& smsg_team_player_reward_change::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_team_player_reward_change.base);
  return *internal_default_instance();
}


void smsg_team_player_reward_change::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_team_player_reward_change)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chenghao_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(chenghao_));
  _internal_metadata_.Clear();
}

bool smsg_team_player_reward_change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_team_player_reward_change)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rank = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 chenghao = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chenghao_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_team_player_reward_change)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_team_player_reward_change)
  return false;
#undef DO_
}

void smsg_team_player_reward_change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_team_player_reward_change)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // int32 point = 3;
  if (this->point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->point(), output);
  }

  // int32 rank = 4;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // int32 chenghao = 5;
  if (this->chenghao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chenghao(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_team_player_reward_change)
}

::google::protobuf::uint8* smsg_team_player_reward_change::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_team_player_reward_change)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guid = 1;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // int32 point = 3;
  if (this->point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->point(), target);
  }

  // int32 rank = 4;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // int32 chenghao = 5;
  if (this->chenghao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chenghao(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_team_player_reward_change)
  return target;
}

size_t smsg_team_player_reward_change::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_team_player_reward_change)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  // int32 point = 3;
  if (this->point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->point());
  }

  // int32 rank = 4;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  // int32 chenghao = 5;
  if (this->chenghao() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chenghao());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_team_player_reward_change::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_team_player_reward_change)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_team_player_reward_change* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_team_player_reward_change>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_team_player_reward_change)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_team_player_reward_change)
    MergeFrom(*source);
  }
}

void smsg_team_player_reward_change::MergeFrom(const smsg_team_player_reward_change& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_team_player_reward_change)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
  if (from.point() != 0) {
    set_point(from.point());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.chenghao() != 0) {
    set_chenghao(from.chenghao());
  }
}

void smsg_team_player_reward_change::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_team_player_reward_change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_team_player_reward_change::CopyFrom(const smsg_team_player_reward_change& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_team_player_reward_change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_team_player_reward_change::IsInitialized() const {
  return true;
}

void smsg_team_player_reward_change::Swap(smsg_team_player_reward_change* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_team_player_reward_change::InternalSwap(smsg_team_player_reward_change* other) {
  using std::swap;
  swap(guid_, other->guid_);
  swap(num_, other->num_);
  swap(point_, other->point_);
  swap(rank_, other->rank_);
  swap(chenghao_, other->chenghao_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_team_player_reward_change::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_change_team_stat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_change_team_stat::kStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_change_team_stat::smsg_change_team_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_change_team_stat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_change_team_stat)
}
smsg_change_team_stat::smsg_change_team_stat(const smsg_change_team_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stat_ = from.stat_;
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_change_team_stat)
}

void smsg_change_team_stat::SharedCtor() {
  stat_ = 0;
}

smsg_change_team_stat::~smsg_change_team_stat() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_change_team_stat)
  SharedDtor();
}

void smsg_change_team_stat::SharedDtor() {
}

void smsg_change_team_stat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_change_team_stat::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_change_team_stat& smsg_change_team_stat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_change_team_stat.base);
  return *internal_default_instance();
}


void smsg_change_team_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_change_team_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  stat_ = 0;
  _internal_metadata_.Clear();
}

bool smsg_change_team_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_change_team_stat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_change_team_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_change_team_stat)
  return false;
#undef DO_
}

void smsg_change_team_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_change_team_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stat = 1;
  if (this->stat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stat(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_change_team_stat)
}

::google::protobuf::uint8* smsg_change_team_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_change_team_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stat = 1;
  if (this->stat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stat(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_change_team_stat)
  return target;
}

size_t smsg_change_team_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_change_team_stat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 stat = 1;
  if (this->stat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_change_team_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_change_team_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_change_team_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_change_team_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_change_team_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_change_team_stat)
    MergeFrom(*source);
  }
}

void smsg_change_team_stat::MergeFrom(const smsg_change_team_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_change_team_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stat() != 0) {
    set_stat(from.stat());
  }
}

void smsg_change_team_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_change_team_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_change_team_stat::CopyFrom(const smsg_change_team_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_change_team_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_change_team_stat::IsInitialized() const {
  return true;
}

void smsg_change_team_stat::Swap(smsg_change_team_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_change_team_stat::InternalSwap(smsg_change_team_stat* other) {
  using std::swap;
  swap(stat_, other->stat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_change_team_stat::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_hanhua::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_hanhua::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_hanhua::cmsg_hanhua()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_cmsg_hanhua.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.cmsg_hanhua)
}
cmsg_hanhua::cmsg_hanhua(const cmsg_hanhua& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:protocol.team.cmsg_hanhua)
}

void cmsg_hanhua::SharedCtor() {
  index_ = 0;
}

cmsg_hanhua::~cmsg_hanhua() {
  // @@protoc_insertion_point(destructor:protocol.team.cmsg_hanhua)
  SharedDtor();
}

void cmsg_hanhua::SharedDtor() {
}

void cmsg_hanhua::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_hanhua::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_hanhua& cmsg_hanhua::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_cmsg_hanhua.base);
  return *internal_default_instance();
}


void cmsg_hanhua::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.cmsg_hanhua)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  index_ = 0;
  _internal_metadata_.Clear();
}

bool cmsg_hanhua::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.cmsg_hanhua)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.cmsg_hanhua)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.cmsg_hanhua)
  return false;
#undef DO_
}

void cmsg_hanhua::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.cmsg_hanhua)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.cmsg_hanhua)
}

::google::protobuf::uint8* cmsg_hanhua::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.cmsg_hanhua)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.cmsg_hanhua)
  return target;
}

size_t cmsg_hanhua::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.cmsg_hanhua)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_hanhua::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.cmsg_hanhua)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_hanhua* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_hanhua>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.cmsg_hanhua)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.cmsg_hanhua)
    MergeFrom(*source);
  }
}

void cmsg_hanhua::MergeFrom(const cmsg_hanhua& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.cmsg_hanhua)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    set_index(from.index());
  }
}

void cmsg_hanhua::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.cmsg_hanhua)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_hanhua::CopyFrom(const cmsg_hanhua& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.cmsg_hanhua)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_hanhua::IsInitialized() const {
  return true;
}

void cmsg_hanhua::Swap(cmsg_hanhua* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_hanhua::InternalSwap(cmsg_hanhua* other) {
  using std::swap;
  swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_hanhua::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_hanhua::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_hanhua::kContentFieldNumber;
const int smsg_hanhua::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_hanhua::smsg_hanhua()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_hanhua.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_hanhua)
}
smsg_hanhua::smsg_hanhua(const smsg_hanhua& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_hanhua)
}

void smsg_hanhua::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_ = GOOGLE_ULONGLONG(0);
}

smsg_hanhua::~smsg_hanhua() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_hanhua)
  SharedDtor();
}

void smsg_hanhua::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void smsg_hanhua::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_hanhua::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_hanhua& smsg_hanhua::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_hanhua.base);
  return *internal_default_instance();
}


void smsg_hanhua::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_hanhua)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool smsg_hanhua::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_hanhua)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.smsg_hanhua.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_hanhua)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_hanhua)
  return false;
#undef DO_
}

void smsg_hanhua::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_hanhua)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_hanhua.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_hanhua)
}

::google::protobuf::uint8* smsg_hanhua::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_hanhua)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_hanhua.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_hanhua)
  return target;
}

size_t smsg_hanhua::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_hanhua)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_hanhua::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_hanhua)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_hanhua* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_hanhua>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_hanhua)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_hanhua)
    MergeFrom(*source);
  }
}

void smsg_hanhua::MergeFrom(const smsg_hanhua& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_hanhua)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
}

void smsg_hanhua::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_hanhua)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_hanhua::CopyFrom(const smsg_hanhua& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_hanhua)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_hanhua::IsInitialized() const {
  return true;
}

void smsg_hanhua::Swap(smsg_hanhua* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_hanhua::InternalSwap(smsg_hanhua* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guid_, other->guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_hanhua::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_change_hanhua::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_change_hanhua::kIndexFieldNumber;
const int cmsg_change_hanhua::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_change_hanhua::cmsg_change_hanhua()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_cmsg_change_hanhua.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.cmsg_change_hanhua)
}
cmsg_change_hanhua::cmsg_change_hanhua(const cmsg_change_hanhua& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      index_(from.index_),
      content_(from.content_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.team.cmsg_change_hanhua)
}

void cmsg_change_hanhua::SharedCtor() {
}

cmsg_change_hanhua::~cmsg_change_hanhua() {
  // @@protoc_insertion_point(destructor:protocol.team.cmsg_change_hanhua)
  SharedDtor();
}

void cmsg_change_hanhua::SharedDtor() {
}

void cmsg_change_hanhua::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_change_hanhua::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_change_hanhua& cmsg_change_hanhua::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_cmsg_change_hanhua.base);
  return *internal_default_instance();
}


void cmsg_change_hanhua::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.cmsg_change_hanhua)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  index_.Clear();
  set_changed();
  content_.Clear();
  _internal_metadata_.Clear();
}

bool cmsg_change_hanhua::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.cmsg_change_hanhua)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_index())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content(this->content_size() - 1).data(),
            static_cast<int>(this->content(this->content_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.cmsg_change_hanhua.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.cmsg_change_hanhua)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.cmsg_change_hanhua)
  return false;
#undef DO_
}

void cmsg_change_hanhua::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.cmsg_change_hanhua)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 index = 1;
  if (this->index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _index_cached_byte_size_));
  }
  for (int i = 0, n = this->index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->index(i), output);
  }

  // repeated string content = 2;
  for (int i = 0, n = this->content_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content(i).data(), static_cast<int>(this->content(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.cmsg_change_hanhua.content");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.cmsg_change_hanhua)
}

::google::protobuf::uint8* cmsg_change_hanhua::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.cmsg_change_hanhua)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 index = 1;
  if (this->index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _index_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->index_, target);
  }

  // repeated string content = 2;
  for (int i = 0, n = this->content_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content(i).data(), static_cast<int>(this->content(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.cmsg_change_hanhua.content");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->content(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.cmsg_change_hanhua)
  return target;
}

size_t cmsg_change_hanhua::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.cmsg_change_hanhua)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 index = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->index_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _index_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string content = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->content_size());
  for (int i = 0, n = this->content_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->content(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_change_hanhua::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.cmsg_change_hanhua)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_change_hanhua* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_change_hanhua>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.cmsg_change_hanhua)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.cmsg_change_hanhua)
    MergeFrom(*source);
  }
}

void cmsg_change_hanhua::MergeFrom(const cmsg_change_hanhua& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.cmsg_change_hanhua)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_.MergeFrom(from.index_);
  content_.MergeFrom(from.content_);
}

void cmsg_change_hanhua::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.cmsg_change_hanhua)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_change_hanhua::CopyFrom(const cmsg_change_hanhua& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.cmsg_change_hanhua)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_change_hanhua::IsInitialized() const {
  return true;
}

void cmsg_change_hanhua::Swap(cmsg_change_hanhua* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_change_hanhua::InternalSwap(cmsg_change_hanhua* other) {
  using std::swap;
  index_.InternalSwap(&other->index_);
  content_.InternalSwap(CastToBase(&other->content_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_change_hanhua::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_fight_ds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_fight_ds::kIdFieldNumber;
const int smsg_fight_ds::kResultFieldNumber;
const int smsg_fight_ds::kTextFieldNumber;
const int smsg_fight_ds::kNameFieldNumber;
const int smsg_fight_ds::kDuanweiFieldNumber;
const int smsg_fight_ds::kBfFieldNumber;
const int smsg_fight_ds::kTemplateIdFieldNumber;
const int smsg_fight_ds::kVipFieldNumber;
const int smsg_fight_ds::kAchieveFieldNumber;
const int smsg_fight_ds::kGuanghuanFieldNumber;
const int smsg_fight_ds::kDressFieldNumber;
const int smsg_fight_ds::kCdTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_fight_ds::smsg_fight_ds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_fight_ds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_fight_ds)
}
smsg_fight_ds::smsg_fight_ds(const smsg_fight_ds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cd_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cd_time_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_fight_ds)
}

void smsg_fight_ds::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cd_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(cd_time_));
}

smsg_fight_ds::~smsg_fight_ds() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_fight_ds)
  SharedDtor();
}

void smsg_fight_ds::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void smsg_fight_ds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_fight_ds::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_fight_ds& smsg_fight_ds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_fight_ds.base);
  return *internal_default_instance();
}


void smsg_fight_ds::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_fight_ds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  set_changed();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cd_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(cd_time_));
  _internal_metadata_.Clear();
}

bool smsg_fight_ds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_fight_ds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.team.smsg_fight_ds.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 duanwei = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duanwei_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 template_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vip = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 achieve = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 guanghuan = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guanghuan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dress = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cd_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cd_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_fight_ds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_fight_ds)
  return false;
#undef DO_
}

void smsg_fight_ds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_fight_ds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // bytes text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->text(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_fight_ds.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // int32 duanwei = 5;
  if (this->duanwei() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->duanwei(), output);
  }

  // int32 bf = 6;
  if (this->bf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bf(), output);
  }

  // int32 template_id = 7;
  if (this->template_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->template_id(), output);
  }

  // int32 vip = 8;
  if (this->vip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->vip(), output);
  }

  // int32 achieve = 9;
  if (this->achieve() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->achieve(), output);
  }

  // int32 guanghuan = 10;
  if (this->guanghuan() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->guanghuan(), output);
  }

  // int32 dress = 11;
  if (this->dress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dress(), output);
  }

  // uint64 cd_time = 12;
  if (this->cd_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->cd_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_fight_ds)
}

::google::protobuf::uint8* smsg_fight_ds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_fight_ds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // bytes text = 3;
  if (this->text().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->text(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.team.smsg_fight_ds.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // int32 duanwei = 5;
  if (this->duanwei() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->duanwei(), target);
  }

  // int32 bf = 6;
  if (this->bf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bf(), target);
  }

  // int32 template_id = 7;
  if (this->template_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->template_id(), target);
  }

  // int32 vip = 8;
  if (this->vip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->vip(), target);
  }

  // int32 achieve = 9;
  if (this->achieve() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->achieve(), target);
  }

  // int32 guanghuan = 10;
  if (this->guanghuan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->guanghuan(), target);
  }

  // int32 dress = 11;
  if (this->dress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dress(), target);
  }

  // uint64 cd_time = 12;
  if (this->cd_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->cd_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_fight_ds)
  return target;
}

size_t smsg_fight_ds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_fight_ds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->text());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // int32 duanwei = 5;
  if (this->duanwei() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duanwei());
  }

  // int32 bf = 6;
  if (this->bf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bf());
  }

  // int32 template_id = 7;
  if (this->template_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->template_id());
  }

  // int32 vip = 8;
  if (this->vip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vip());
  }

  // int32 achieve = 9;
  if (this->achieve() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->achieve());
  }

  // int32 guanghuan = 10;
  if (this->guanghuan() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guanghuan());
  }

  // int32 dress = 11;
  if (this->dress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dress());
  }

  // uint64 cd_time = 12;
  if (this->cd_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cd_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_fight_ds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_fight_ds)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_fight_ds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_fight_ds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_fight_ds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_fight_ds)
    MergeFrom(*source);
  }
}

void smsg_fight_ds::MergeFrom(const smsg_fight_ds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_fight_ds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.duanwei() != 0) {
    set_duanwei(from.duanwei());
  }
  if (from.bf() != 0) {
    set_bf(from.bf());
  }
  if (from.template_id() != 0) {
    set_template_id(from.template_id());
  }
  if (from.vip() != 0) {
    set_vip(from.vip());
  }
  if (from.achieve() != 0) {
    set_achieve(from.achieve());
  }
  if (from.guanghuan() != 0) {
    set_guanghuan(from.guanghuan());
  }
  if (from.dress() != 0) {
    set_dress(from.dress());
  }
  if (from.cd_time() != 0) {
    set_cd_time(from.cd_time());
  }
}

void smsg_fight_ds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_fight_ds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_fight_ds::CopyFrom(const smsg_fight_ds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_fight_ds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_fight_ds::IsInitialized() const {
  return true;
}

void smsg_fight_ds::Swap(smsg_fight_ds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_fight_ds::InternalSwap(smsg_fight_ds* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(result_, other->result_);
  swap(duanwei_, other->duanwei_);
  swap(bf_, other->bf_);
  swap(template_id_, other->template_id_);
  swap(vip_, other->vip_);
  swap(achieve_, other->achieve_);
  swap(guanghuan_, other->guanghuan_);
  swap(dress_, other->dress_);
  swap(cd_time_, other->cd_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_fight_ds::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_reset_ds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_reset_ds::kOldduanweiFieldNumber;
const int smsg_reset_ds::kNewduanweiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_reset_ds::smsg_reset_ds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_reset_ds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.team.smsg_reset_ds)
}
smsg_reset_ds::smsg_reset_ds(const smsg_reset_ds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&oldduanwei_, &from.oldduanwei_,
    static_cast<size_t>(reinterpret_cast<char*>(&newduanwei_) -
    reinterpret_cast<char*>(&oldduanwei_)) + sizeof(newduanwei_));
  // @@protoc_insertion_point(copy_constructor:protocol.team.smsg_reset_ds)
}

void smsg_reset_ds::SharedCtor() {
  ::memset(&oldduanwei_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newduanwei_) -
      reinterpret_cast<char*>(&oldduanwei_)) + sizeof(newduanwei_));
}

smsg_reset_ds::~smsg_reset_ds() {
  // @@protoc_insertion_point(destructor:protocol.team.smsg_reset_ds)
  SharedDtor();
}

void smsg_reset_ds::SharedDtor() {
}

void smsg_reset_ds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_reset_ds::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_reset_ds& smsg_reset_ds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_reset_ds.base);
  return *internal_default_instance();
}


void smsg_reset_ds::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.team.smsg_reset_ds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&oldduanwei_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newduanwei_) -
      reinterpret_cast<char*>(&oldduanwei_)) + sizeof(newduanwei_));
  _internal_metadata_.Clear();
}

bool smsg_reset_ds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.team.smsg_reset_ds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 oldduanwei = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldduanwei_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 newduanwei = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newduanwei_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.team.smsg_reset_ds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.team.smsg_reset_ds)
  return false;
#undef DO_
}

void smsg_reset_ds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.team.smsg_reset_ds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 oldduanwei = 1;
  if (this->oldduanwei() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oldduanwei(), output);
  }

  // int32 newduanwei = 2;
  if (this->newduanwei() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->newduanwei(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.team.smsg_reset_ds)
}

::google::protobuf::uint8* smsg_reset_ds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.team.smsg_reset_ds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 oldduanwei = 1;
  if (this->oldduanwei() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oldduanwei(), target);
  }

  // int32 newduanwei = 2;
  if (this->newduanwei() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->newduanwei(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.team.smsg_reset_ds)
  return target;
}

size_t smsg_reset_ds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.team.smsg_reset_ds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 oldduanwei = 1;
  if (this->oldduanwei() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oldduanwei());
  }

  // int32 newduanwei = 2;
  if (this->newduanwei() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->newduanwei());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_reset_ds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.team.smsg_reset_ds)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_reset_ds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_reset_ds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.team.smsg_reset_ds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.team.smsg_reset_ds)
    MergeFrom(*source);
  }
}

void smsg_reset_ds::MergeFrom(const smsg_reset_ds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.team.smsg_reset_ds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.oldduanwei() != 0) {
    set_oldduanwei(from.oldduanwei());
  }
  if (from.newduanwei() != 0) {
    set_newduanwei(from.newduanwei());
  }
}

void smsg_reset_ds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.team.smsg_reset_ds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_reset_ds::CopyFrom(const smsg_reset_ds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.team.smsg_reset_ds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_reset_ds::IsInitialized() const {
  return true;
}

void smsg_reset_ds::Swap(smsg_reset_ds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_reset_ds::InternalSwap(smsg_reset_ds* other) {
  using std::swap;
  swap(oldduanwei_, other->oldduanwei_);
  swap(newduanwei_, other->newduanwei_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_reset_ds::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace team
}  // namespace protocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::team_player* Arena::CreateMaybeMessage< ::protocol::team::team_player >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::team_player >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::team* Arena::CreateMaybeMessage< ::protocol::team::team >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::team >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::team_invite* Arena::CreateMaybeMessage< ::protocol::team::team_invite >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::team_invite >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::bingyuan_huihe* Arena::CreateMaybeMessage< ::protocol::team::bingyuan_huihe >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::bingyuan_huihe >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::bingyuan_fight_text* Arena::CreateMaybeMessage< ::protocol::team::bingyuan_fight_text >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::bingyuan_fight_text >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::cmsg_enter_world* Arena::CreateMaybeMessage< ::protocol::team::cmsg_enter_world >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::cmsg_enter_world >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_enter_world* Arena::CreateMaybeMessage< ::protocol::team::smsg_enter_world >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_enter_world >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_team_create* Arena::CreateMaybeMessage< ::protocol::team::smsg_team_create >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_team_create >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::cmsg_team_enter* Arena::CreateMaybeMessage< ::protocol::team::cmsg_team_enter >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::cmsg_team_enter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_team_enter* Arena::CreateMaybeMessage< ::protocol::team::smsg_team_enter >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_team_enter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_team_leave* Arena::CreateMaybeMessage< ::protocol::team::smsg_team_leave >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_team_leave >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::cmsg_team_kick* Arena::CreateMaybeMessage< ::protocol::team::cmsg_team_kick >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::cmsg_team_kick >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_team_prepare* Arena::CreateMaybeMessage< ::protocol::team::smsg_team_prepare >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_team_prepare >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::cmsg_team_move* Arena::CreateMaybeMessage< ::protocol::team::cmsg_team_move >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::cmsg_team_move >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_team_move* Arena::CreateMaybeMessage< ::protocol::team::smsg_team_move >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_team_move >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_fight_team* Arena::CreateMaybeMessage< ::protocol::team::smsg_fight_team >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_fight_team >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::cmsg_chat_team* Arena::CreateMaybeMessage< ::protocol::team::cmsg_chat_team >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::cmsg_chat_team >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_chat_team* Arena::CreateMaybeMessage< ::protocol::team::smsg_chat_team >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_chat_team >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::cmsg_player_look* Arena::CreateMaybeMessage< ::protocol::team::cmsg_player_look >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::cmsg_player_look >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_player_look* Arena::CreateMaybeMessage< ::protocol::team::smsg_player_look >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_player_look >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_invite_add* Arena::CreateMaybeMessage< ::protocol::team::smsg_invite_add >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_invite_add >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::cmsg_invite_agree* Arena::CreateMaybeMessage< ::protocol::team::cmsg_invite_agree >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::cmsg_invite_agree >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_invite_remove* Arena::CreateMaybeMessage< ::protocol::team::smsg_invite_remove >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_invite_remove >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_invite_remove_social* Arena::CreateMaybeMessage< ::protocol::team::smsg_invite_remove_social >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_invite_remove_social >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_invite_all* Arena::CreateMaybeMessage< ::protocol::team::smsg_invite_all >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_invite_all >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_team_player_reward_change* Arena::CreateMaybeMessage< ::protocol::team::smsg_team_player_reward_change >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_team_player_reward_change >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_change_team_stat* Arena::CreateMaybeMessage< ::protocol::team::smsg_change_team_stat >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_change_team_stat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::cmsg_hanhua* Arena::CreateMaybeMessage< ::protocol::team::cmsg_hanhua >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::cmsg_hanhua >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_hanhua* Arena::CreateMaybeMessage< ::protocol::team::smsg_hanhua >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_hanhua >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::cmsg_change_hanhua* Arena::CreateMaybeMessage< ::protocol::team::cmsg_change_hanhua >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::cmsg_change_hanhua >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_fight_ds* Arena::CreateMaybeMessage< ::protocol::team::smsg_fight_ds >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_fight_ds >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::team::smsg_reset_ds* Arena::CreateMaybeMessage< ::protocol::team::smsg_reset_ds >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::team::smsg_reset_ds >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
