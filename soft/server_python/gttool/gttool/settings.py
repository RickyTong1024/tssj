"""
Django settings for gttool project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'u9$ei^vm4#+g7&(@t1+x4jcow%2y=24e&hrdjasc93!06vi*x-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'engine',
    'django_crontab',
    'bootstrap3',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gttool.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gttool.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'gttool',
        'USER': 'root',
        'PASSWORD': 'root',
        'HOST': '127.0.0.1',
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static').replace('\\', '/')

STATICFILES_DIRS = (
    ("img", os.path.join(STATIC_ROOT, 'img').replace('\\', '/')),
    ("css", os.path.join(STATIC_ROOT, 'css').replace('\\', '/')),
    ("js", os.path.join(STATIC_ROOT, 'js').replace('\\', '/')),
    ("other", os.path.join(STATIC_ROOT, 'other').replace('\\', '/')),
    ("libao", os.path.join(STATIC_ROOT, 'libao').replace('\\', '/')),
)

STATIC_URL = '/static/'
BOOTSTRAP_BASE_URL = '/static/'
ALIYUN_ID = "LTAIZR9Nn6vxMjoC"
ALIYUN_KEY = "7ekqhZYtDOQ6BlfhsbubOsGDvU4Usm"


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        }
    },
    'handlers': {
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(STATIC_ROOT+'/logs/', 'request.log'),
            'maxBytes': 1024 * 1024 * 100,
            'formatter': 'simple',
        },
    },
    'loggers': {
        'engine.manage': {
            'handlers': ['default'],
            'level': 'INFO',
            'propagate': True
        }
    }
}

CRONJOBS = [
    ('01 0 * * *', 'engine.cron.sync_activity'),
    ('0 2 * * *', 'engine.cron.tongji_normal'),
    ('01 2 * * *', 'engine.cron.tongji_liucun'),
    ('0 3 * * *', 'engine.cron.tongji_qudao_normal'),
    ('01 3 * * *', 'engine.cron.tongji_qudao_liucun'),
    ('0 4 * * *', 'engine.cron.tongji_normal_huoyue'),
    ('0 * * * *', 'engine.cron.sync_server'),
]

LOG_QUERY_HOST = "127.0.0.1"
LOG_QUERY_DB = "tslog"
LOG_QUERY_ROOT = "root"
LOG_QUERY_PSD = "root"
